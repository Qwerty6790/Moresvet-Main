'use client';

/**
 * –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –∏–∑–º–µ—Ä–µ–Ω–∏—è –∏ —É–ª—É—á—à–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
 */

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –¥–ª—è —Ç–∏–ø–æ–≤
interface LayoutShift extends PerformanceEntry {
  value: number;
  hadRecentInput: boolean;
}

interface PerformanceEventTiming extends PerformanceEntry {
  processingStart: number;
  processingEnd: number;
  duration: number;
  startTime: number;
}

// –ò–∑–º–µ—Ä—è–µ—Ç –≤—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
export function measureLoadTime(componentName: string) {
  if (typeof window === 'undefined' || process.env.NODE_ENV !== 'development') return;
  
  const startTime = performance.now();
  
  return () => {
    const endTime = performance.now();
    const loadTime = endTime - startTime;
    console.log(`üìä –í—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏ ${componentName}: ${loadTime.toFixed(2)}ms`);
  };
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
export function preloadCriticalImages() {
  if (typeof window === 'undefined') return;
  
  const criticalImages = [
    '/images/TrekovoeLogo.png',
    '/images/SvetlnikiLogo.png',
    '/images/Maytoni.jpg',
    '/images/Werkel.png',
  ];
  
  criticalImages.forEach(src => {
    const link = document.createElement('link');
    link.rel = 'preload';
    link.as = 'image';
    link.href = src;
    document.head.appendChild(link);
  });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –æ—Ç–ª–∞–¥–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
export function enablePerformanceDebugging() {
  if (typeof window === 'undefined' || process.env.NODE_ENV !== 'development') return;
  
  // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º CLS (Cumulative Layout Shift)
  let cumulativeLayoutShiftScore = 0;
  
  const observer = new PerformanceObserver((entryList) => {
    for (const entry of entryList.getEntries()) {
      const shift = entry as LayoutShift;
      if (!shift.hadRecentInput) {
        cumulativeLayoutShiftScore += shift.value;
        console.log(`üìè Layout Shift: ${shift.value.toFixed(4)}, Total CLS: ${cumulativeLayoutShiftScore.toFixed(4)}`);
      }
    }
  });
  
  try {
    observer.observe({ type: 'layout-shif', buffered: true });
  } catch (e) {
    console.log('PerformanceObserver –¥–ª—è CLS –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –≤ —ç—Ç–æ–º –±—Ä–∞—É–∑–µ—Ä–µ');
  }
  
  // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º LCP (Largest Contentful Paint)
  const lcpObserver = new PerformanceObserver((entryList) => {
    const entries = entryList.getEntries();
    const lastEntry = entries[entries.length - 1];
    console.log(`üñºÔ∏è Largest Contentful Paint: ${lastEntry.startTime.toFixed(0)}ms`);
  });
  
  try {
    lcpObserver.observe({ type: 'largest-contentful-paint', buffered: true });
  } catch (e) {
    console.log('PerformanceObserver –¥–ª—è LCP –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –≤ —ç—Ç–æ–º –±—Ä–∞—É–∑–µ—Ä–µ');
  }
  
  // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º FID (First Input Delay)
  const fidObserver = new PerformanceObserver((entryList) => {
    for (const entry of entryList.getEntries()) {
      const delay = entry as PerformanceEventTiming;
      console.log(`üëÜ First Input Delay: ${delay.processingStart - delay.startTime}ms`);
    }
  });
  
  try {
    fidObserver.observe({ type: 'first-input', buffered: true });
  } catch (e) {
    console.log('PerformanceObserver –¥–ª—è FID –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –≤ —ç—Ç–æ–º –±—Ä–∞—É–∑–µ—Ä–µ');
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫—É –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–π —Å—Ç–æ—Ä–æ–Ω—ã
if (typeof window !== 'undefined') {
  preloadCriticalImages();
  // –í–∫–ª—é—á–∞–µ–º —Ç–æ–ª—å–∫–æ –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
  if (process.env.NODE_ENV === 'development') {
    enablePerformanceDebugging();
  }
} 