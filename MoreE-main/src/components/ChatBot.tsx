import React, { useState, useEffect, useRef } from 'react';
import { 
  Search, 
  Send, 
  X, 
  MessageCircle, 
  ChevronDown, 
  Sun, 
  Moon, 
  ThumbsUp, 
  ThumbsDown 
} from 'lucide-react';

interface Product {
  name: string;
  description: string;
  price: string;
  rating: number;
  image: string;
  features: string[];
  recommendations: string;
}

interface Message {
  type: 'user' | 'bot';
  content: string;
  products?: Product[];
  suggestions?: string[];
}

const products: Record<string, Product> = {
  –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è: {
    name: '–•—Ä—É—Å—Ç–∞–ª—å–Ω–∞—è –ª—é—Å—Ç—Ä–∞ "–í–µ—Ä—Å–∞–ª—å"',
    description: '–†–æ—Å–∫–æ—à–Ω–∞—è –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è –ª—é—Å—Ç—Ä–∞ —Å —Ö—Ä—É—Å—Ç–∞–ª—å–Ω—ã–º–∏ –ø–æ–¥–≤–µ—Å–∫–∞–º–∏ –∏ –ø–æ–∑–æ–ª–æ—á–µ–Ω–Ω–æ–π —Ñ—É—Ä–Ω–∏—Ç—É—Ä–æ–π.',
    price: '45000 —Ä—É–±',
    rating: 4.8,
    image: '/api/placeholder/300/200',
    features: [
      '–ú–∞—Ç–µ—Ä–∏–∞–ª: —Ö—Ä—É—Å—Ç–∞–ª—å, –º–µ—Ç–∞–ª–ª —Å –ø–æ–∑–æ–ª–æ—Ç–æ–π',
      '12 –ª–∞–º–ø E14',
      '–ú–æ—â–Ω–æ—Å—Ç—å: 40W –Ω–∞ –ª–∞–º–ø—É',
      '–î–∏–∞–º–µ—Ç—Ä: 80 —Å–º',
      '–í—ã—Å–æ—Ç–∞: 100 —Å–º',
      '–°—Ç–∏–ª—å: –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π',
      '–î–∏—Å—Ç–∞–Ω—Ü–∏–æ–Ω–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ',
      '–†–µ–≥—É–ª–∏—Ä–æ–≤–∫–∞ —è—Ä–∫–æ—Å—Ç–∏'
    ],
    recommendations: '–ò–¥–µ–∞–ª—å–Ω–æ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –≥–æ—Å—Ç–∏–Ω—ã—Ö –∏ –∑–∞–ª–æ–≤ —Å –≤—ã—Å–æ–∫–∏–º–∏ –ø–æ—Ç–æ–ª–∫–∞–º–∏ –≤ –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–æ–º —Å—Ç–∏–ª–µ.',
  },
  —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è: {
    name: '–°–≤–µ—Ç–æ–¥–∏–æ–¥–Ω–∞—è –ª—é—Å—Ç—Ä–∞ "–û—Ä–±–∏—Ç–∞"',
    description: '–°–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è –≥–µ–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∞—è –ª—é—Å—Ç—Ä–∞ —Å LED-–ø–æ–¥—Å–≤–µ—Ç–∫–æ–π –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º–æ–π —Ü–≤–µ—Ç–æ–≤–æ–π —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–æ–π.',
    price: '32000 —Ä—É–±',
    rating: 4.9,
    image: '/api/placeholder/300/200',
    features: [
      '–í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ LED-—ç–ª–µ–º–µ–Ω—Ç—ã',
      '–ú–æ—â–Ω–æ—Å—Ç—å: 80W',
      '–î–∏–∞–º–µ—Ç—Ä: 60 —Å–º',
      '–ú–∞—Ç–µ—Ä–∏–∞–ª: –∞–ª—é–º–∏–Ω–∏–π, –∞–∫—Ä–∏–ª',
      'Smart-—É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ',
      'RGB-–ø–æ–¥—Å–≤–µ—Ç–∫–∞',
      'Wi-Fi –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ',
      '–°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å —É–º–Ω—ã–º –¥–æ–º–æ–º'
    ],
    recommendations: '–û—Ç–ª–∏—á–Ω–æ –≤–ø–∏—à–µ—Ç—Å—è –≤ –º–∏–Ω–∏–º–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π –∏–ª–∏ —Ö–∞–π-—Ç–µ–∫ –∏–Ω—Ç–µ—Ä—å–µ—Ä.',
  },
  –ª–æ—Ñ—Ç: {
    name: '–ò–Ω–¥—É—Å—Ç—Ä–∏–∞–ª—å–Ω–∞—è –ª—é—Å—Ç—Ä–∞ "–≠–¥–∏—Å–æ–Ω"',
    description: '–°—Ç–∏–ª—å–Ω–∞—è –ª–æ—Ñ—Ç-–ª—é—Å—Ç—Ä–∞ —Å –≤–∏–Ω—Ç–∞–∂–Ω—ã–º–∏ –ª–∞–º–ø–∞–º–∏ –≠–¥–∏—Å–æ–Ω–∞ –∏ —á–µ—Ä–Ω—ã–º –º–µ—Ç–∞–ª–ª–∏—á–µ—Å–∫–∏–º –∫–∞—Ä–∫–∞—Å–æ–º.',
    price: '28000 —Ä—É–±',
    rating: 4.7,
    image: '/api/placeholder/300/200',
    features: [
      '–ú–∞—Ç–µ—Ä–∏–∞–ª: —á–µ—Ä–Ω—ã–π –º–µ—Ç–∞–ª–ª',
      '8 –ª–∞–º–ø E27',
      '–í–∏–Ω—Ç–∞–∂–Ω—ã–µ –ª–∞–º–ø—ã –≤ –∫–æ–º–ø–ª–µ–∫—Ç–µ',
      '–†–µ–≥—É–ª–∏—Ä—É–µ–º–∞—è –≤—ã—Å–æ—Ç–∞',
      '–®–∏—Ä–∏–Ω–∞: 100 —Å–º',
      '–í—ã—Å–æ—Ç–∞: 40-120 —Å–º',
      '–°–æ—Å—Ç–∞—Ä–µ–Ω–Ω–∞—è –æ—Ç–¥–µ–ª–∫–∞',
      '–ò–Ω–¥—É—Å—Ç—Ä–∏–∞–ª—å–Ω—ã–π –¥–∏–∑–∞–π–Ω'
    ],
    recommendations: '–ü—Ä–µ–∫—Ä–∞—Å–Ω–æ –ø–æ–¥–æ–π–¥–µ—Ç –¥–ª—è –ª–æ—Ñ—Ç-–∏–Ω—Ç–µ—Ä—å–µ—Ä–æ–≤, –∫–∞—Ñ–µ, —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤ –∏–ª–∏ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∫–≤–∞—Ä—Ç–∏—Ä.',
  }
};

const SmartLightingBot: React.FC = () => {
  const [isOpen, setIsOpen] = useState(false);
  const [messages, setMessages] = useState<Message[]>([
    {
      type: 'bot',
      content: '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –Ø –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø–æ –æ—Å–≤–µ—â–µ–Ω–∏—é. –ü–æ–º–æ–≥—É –ø–æ–¥–æ–±—Ä–∞—Ç—å –∏–¥–µ–∞–ª—å–Ω—É—é –ª—é—Å—Ç—Ä—É –∏–ª–∏ —Å–≤–µ—Ç–∏–ª—å–Ω–∏–∫ –¥–ª—è –≤–∞—à–µ–≥–æ –∏–Ω—Ç–µ—Ä—å–µ—Ä–∞.',
      suggestions: ['–ü–æ–∫–∞–∑–∞—Ç—å –∫–∞—Ç–∞–ª–æ–≥', '–ü–æ–º–æ—â—å –≤ –≤—ã–±–æ—Ä–µ', '–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –º–æ–¥–µ–ª–∏']
    }
  ]);
  const [userInput, setUserInput] = useState('');
  const [isTyping, setIsTyping] = useState(false);
  const [theme, setTheme] = useState<'light' | 'dark'>('light');
  const messagesEndRef = useRef<HTMLDivElement>(null);

  const handleProductSelect = (product: Product) => {
    const response: Message = {
      type: 'bot',
      content: `
üì± ${product.name}

${product.description}

üí∞ –¶–µ–Ω–∞: ${product.price}
‚≠êÔ∏è –†–µ–π—Ç–∏–Ω–≥: ${product.rating}

‚ú® –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:
${product.features.map(f => `‚Ä¢ ${f}`).join('\n')}

üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:
${product.recommendations}
      `,
      suggestions: ['–ó–∞–∫–∞–∑–∞—Ç—å', '–î—Ä—É–≥–∏–µ –º–æ–¥–µ–ª–∏', '–°—Ä–∞–≤–Ω–∏—Ç—å']
    };
    setMessages(prev => [...prev, response]);
  };

  const generateResponse = (userMessage: string): Message => {
    const msg = userMessage.toLowerCase();

    if (msg.includes('–∫–∞—Ç–∞–ª–æ–≥') || msg.includes('–ø–æ–∫–∞–∑–∞—Ç—å')) {
      return {
        type: 'bot',
        content: '–í–æ—Ç –Ω–∞—à–∏ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –º–æ–¥–µ–ª–∏ –ª—é—Å—Ç—Ä:',
        products: [products.–∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è, products.—Å–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è, products.–ª–æ—Ñ—Ç],
        suggestions: ['–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π —Å—Ç–∏–ª—å', '–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π —Å—Ç–∏–ª—å', '–õ–æ—Ñ—Ç']
      };
    }

    if (msg.includes('–∫–ª–∞—Å—Å') || msg.includes('–∫–ª–∞—Å—Å–∏—á–µ—Å–∫')) {
      return {
        type: 'bot',
        content: '–í–æ—Ç –Ω–∞—à–∞ –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è –º–æ–¥–µ–ª—å:',
        products: [products.–∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è],
        suggestions: ['–£–∑–Ω–∞—Ç—å —Ü–µ–Ω—É', '–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏', '–î—Ä—É–≥–∏–µ —Å—Ç–∏–ª–∏']
      };
    }

    return {
      type: 'bot',
      content: '–ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å –≤ –≤—ã–±–æ—Ä–µ –æ—Å–≤–µ—â–µ–Ω–∏—è?',
      suggestions: ['–ü–æ–∫–∞–∑–∞—Ç—å –∫–∞—Ç–∞–ª–æ–≥', '–ü–æ–º–æ—â—å –≤ –≤—ã–±–æ—Ä–µ', '–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –º–æ–¥–µ–ª–∏']
    };
  };

  const sendMessage = () => {
    if (userInput.trim()) {
      const newMessage: Message = { type: 'user', content: userInput };
      setMessages(prev => [...prev, newMessage]);
      setUserInput('');
      setIsTyping(true);

      setTimeout(() => {
        setIsTyping(false);
        const botResponse = generateResponse(newMessage.content);
        setMessages(prev => [...prev, botResponse]);
      }, 1000);
    }
  };

  const handleSuggestionClick = (suggestion: string) => {
    setUserInput(suggestion);
    sendMessage();
  };

  useEffect(() => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  }, [messages]);

  return (
    <div>
      <div
        className={`fixed bottom-6 max-md:hidden right-0 max-md:w-full w-96  bg-white shadow-xl  rounded-lg overflow-hidden flex flex-col transition-all duration-300 transform ${
          isOpen ? 'h-[600px]' : 'h-[60px]'
        }`}
      >
        {/* Header */}
        <div
          className={`${
            theme === 'light' ? 'bg-gradient-to-r bg-white ' : 'bg-gradient-to-r text-white from-gray-800 to-gray-900'
          } text-black p-4 flex justify-between items-center cursor-pointer`}
          onClick={() => setIsOpen(!isOpen)}
        >
          <div className="flex items-center gap-2">
            <MessageCircle size={20} className="animate-pulse" />
            <span className="font-semibold">–£–º–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –æ—Å–≤–µ—â–µ–Ω–∏—é</span>
          </div>
          <div className="flex items-center gap-2">
            {theme === 'light' ? (
              <Moon size={20} className="hover:text-purple-200 cursor-pointer" onClick={() => setTheme('dark')} />
            ) : (
              <Sun size={20} className="hover:text-yellow-200 cursor-pointer" onClick={() => setTheme('light')} />
            )}
            {isOpen ? <X size={20} /> : <ChevronDown size={20} />}
          </div>
        </div>

        {isOpen && (
          <>
            {/* Messages */}
            <div className={`flex-1 p-4 overflow-y-auto ${theme === 'dark' ? 'bg-gray-900' : 'bg-gray-50'}`}>
              {messages.map((message, index) => (
                <div key={index} className="mb-4">
                  <div
                    className={`${
                      message.type === 'user' ? 'ml-auto' : 'mr-auto'
                    } max-w-[80%]`}
                  >
                    <div
                      className={`p-3 rounded-lg ${
                        message.type === 'user'
                          ? 'bg-white text-black'
                          : theme === 'dark'
                          ? 'bg-gray-800 text-white'
                          : 'bg-white text-gray-800 shadow-sm'
                      }`}
                    >
                      {message.content}
                    </div>

                    {message.products && (
                      <div className="mt-4 space-y-4">
                        {message.products.map((product, idx) => (
                          <div key={idx} className="bg-white rounded-lg shadow-lg p-4">
                            <img src={product.image} alt={product.name} className="w-full h-40 object-cover rounded-lg mb-4" />
                            <h3 className="text-lg font-semibold mb-2">{product.name}</h3>
                            <p className="text-gray-600 mb-2">{product.description}</p>
                            <div className="flex items-center justify-between mb-2">
                              <span className="text-purple-600 font-bold">{product.price}</span>
                              <div className="flex items-center">
                                <span className="text-yellow-500 mr-1">‚òÖ</span>
                                <span>{product.rating}</span>
                              </div>
                            </div>
                            <button 
                              className="w-full bg-purple-600 text-white py-2 rounded-lg hover:bg-purple-700 transition-colors"
                              onClick={() => handleProductSelect(product)}
                            >
                              –ü–æ–¥—Ä–æ–±–Ω–µ–µ
                            </button>
                          </div>
                        ))}
                      </div>
                    )}

                    {message.suggestions && (
                      <div className="mt-2 flex flex-wrap gap-2">
                        {message.suggestions.map((suggestion, idx) => (
                          <button
                            key={idx}
                            onClick={() => handleSuggestionClick(suggestion)}
                            className={`px-3 py-1 rounded-full text-sm ${
                              theme === 'dark'
                                ? 'bg-gray-800 hover:bg-gray-700'
                                : 'bg-gray-100 hover:bg-gray-200'
                            }`}
                          >
                            {suggestion}
                          </button>
                        ))}
                      </div>
                    )}
                  </div>
                </div>
              ))}
              <div ref={messagesEndRef} />
            </div>

            {/* Input */}
            <div className={`p-4 ${theme === 'dark' ? 'bg-gray-800' : 'bg-white'} border-t`}>
            <div className="flex gap-2 flex-wrap">
  <input
    type="text"
    value={userInput}
    onChange={(e) => setUserInput(e.target.value)}
    onKeyPress={(e) => e.key === 'Enter' && sendMessage()}
    placeholder="–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å..."
    className={`flex-1 p-2 rounded-lg focus:outline-none ${
      theme === 'dark'
        ? 'bg-gray-700 text-white'
        : 'bg-gray-100 border-gray-300'
    }`}
  />
  <button
    onClick={sendMessage}
    className="p-2 bg-white text-black rounded-lg hover:opacity-90 transition-opacity"
  >
    <Send size={20} />
  </button>
</div>

            </div>
          </>
        )}
      </div>
    </div>
  );
};

export default SmartLightingBot;
