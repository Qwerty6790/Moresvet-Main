'use client'
import React, { useEffect, useState, useRef } from 'react';
import { useRouter } from 'next/router';
import { GetServerSideProps } from 'next';
import axios from 'axios';
import Link from 'next/link';
import Header from '@/components/Header';
import 'tailwindcss/tailwind.css';
import '../../styles/categories.css';
import Footer from '@/components/Footer';
import { ProductI } from '@/types/interfaces';
import { BASE_URL } from '@/utils/constants';
import { ClipLoader } from 'react-spinners';
import SEO from '@/components/SEO';
import { fetchProductsWithSorting } from '@/utils/api';

import CatalogOfProductSearch from '@/components/Catalogofsearch';
import Head from 'next/head'; // –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç Head

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–∏–ø—ã –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏ –±—Ä–µ–Ω–¥–æ–≤
export type Category = {
  label: string;
  searchName: string;
  href?: string;
  aliases?: string[];
  subcategories?: Category[]; // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  isOpen?: boolean; // –î–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞–∫–∫–æ—Ä–¥–µ–æ–Ω–∞
  id?: string; // –î–æ–±–∞–≤–ª—è–µ–º id –¥–ª—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  slug?: string; // –î–æ–±–∞–≤–ª—è–µ–º slug –¥–ª—è –∫—Ä–∞—Å–∏–≤—ã—Ö URL
};

// –ú–∞–ø–ø–∏–Ω–≥ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –Ω–∞ –∫—Ä–∞—Å–∏–≤—ã–µ URL slug'–∏
const categorySlugMap: Record<string, string> = {
  '–õ—é—Å—Ç—Ä—ã': 'chandeliers',
  '–õ—é—Å—Ç—Ä–∞ –ø–æ–¥–≤–µ—Å–Ω–∞—è': 'pendant-chandeliers',
  '–õ—é—Å—Ç—Ä–∞ –ø–æ—Ç–æ–ª–æ—á–Ω–∞—è': 'ceiling-chandeliers',
  '–õ—é—Å—Ç—Ä–∞ –∫–∞—Å–∫–∞–¥–Ω–∞—è': 'cascade-chandeliers',
  '–õ—é—Å—Ç—Ä–∞ —Ö—Ä—É—Å—Ç–∞–ª—å–Ω–∞—è': 'crystal-chandeliers',
  '–õ—é—Å—Ç—Ä–∞ –Ω–∞ —à—Ç–∞–Ω–≥–µ': 'rod-chandeliers',
  '–°–≤–µ—Ç–∏–ª—å–Ω–∏–∫–∏': 'lights',
  '–ü–æ—Ç–æ–ª–æ—á–Ω—ã–π —Å–≤–µ—Ç–∏–ª—å–Ω–∏–∫': 'ceiling-lights',
  '–ü–æ–¥–≤–µ—Å–Ω–æ–π —Å–≤–µ—Ç–∏–ª—å–Ω–∏–∫': 'pendant-lights',
  '–ù–∞—Å—Ç–µ–Ω–Ω—ã–π —Å–≤–µ—Ç–∏–ª—å–Ω–∏–∫': 'wall-lights',
  '–í—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã–π —Å–≤–µ—Ç–∏–ª—å–Ω–∏–∫': 'recessed-lights',
  '–ù–∞–∫–ª–∞–¥–Ω–æ–π —Å–≤–µ—Ç–∏–ª—å–Ω–∏–∫': 'surface-lights',
  '–¢—Ä–µ–∫–æ–≤—ã–π —Å–≤–µ—Ç–∏–ª—å–Ω–∏–∫': 'track-lights',
  '–¢–æ—á–µ—á–Ω—ã–π —Å–≤–µ—Ç–∏–ª—å–Ω–∏–∫': 'spot-lights',
  '–ë—Ä–∞': 'wall-sconces',
  '–¢–æ—Ä—à–µ—Ä': 'floor-lamps',
  '–ù–∞—Å—Ç–æ–ª—å–Ω–∞—è –ª–∞–º–ø–∞': 'table-lamps',
  '–£–ª–∏—á–Ω—ã–π —Å–≤–µ—Ç–∏–ª—å–Ω–∏–∫': 'outdoor-lights',
  '–õ–∞–Ω–¥—à–∞—Ñ—Ç–Ω—ã–π —Å–≤–µ—Ç–∏–ª—å–Ω–∏–∫': 'landscape-lights',
  '–ì—Ä—É–Ω—Ç–æ–≤—ã–π —Å–≤–µ—Ç–∏–ª—å–Ω–∏–∫': 'ground-lights',
  '–°–≤–µ—Ç–æ–¥–∏–æ–¥–Ω–∞—è –ª–µ–Ω—Ç–∞': 'led-strips',
  '–ü—Ä–æ—Ñ–∏–ª—å –¥–ª—è –ª–µ–Ω—Ç—ã': 'led-profiles',
  '–ë–ª–æ–∫ –ø–∏—Ç–∞–Ω–∏—è': 'power-supplies',
  '–ö–æ–Ω–Ω–µ–∫—Ç–æ—Ä—ã': 'connectors',
  '–®–∏–Ω–æ–ø—Ä–æ–≤–æ–¥': 'track-systems',
  '–ö–æ–º–ø–ª–µ–∫—Ç—É—é—â–∏–µ': 'accessories',
  '–£–º–Ω—ã–π —Å–≤–µ—Ç': 'smart-lighting'
};

// –û–±—Ä–∞—Ç–Ω—ã–π –º–∞–ø–ø–∏–Ω–≥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ slug
const slugToCategoryMap: Record<string, string> = Object.fromEntries(
  Object.entries(categorySlugMap).map(([category, slug]) => [slug, category])
);

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è slug –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
const getCategorySlug = (category: string): string => {
  return categorySlugMap[category] || category.toLowerCase().replace(/\s+/g, '-');
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ slug
const getCategoryFromSlug = (slug: string): string => {
  return slugToCategoryMap[slug] || slug;
};

// –ú–∞–ø–ø–∏–Ω–≥ –±—Ä–µ–Ω–¥–æ–≤ –Ω–∞ –∫—Ä–∞—Å–∏–≤—ã–µ URL slug'–∏
const brandSlugMap: Record<string, string> = {
  'Artelamp': 'artelamp',
  'KinkLight': 'kinklight',
  'Favourite': 'favourite',
  'Lumion': 'lumion',
  'LightStar': 'lightstar',
  'OdeonLight': 'odeonlight',
  'Maytoni': 'maytoni',
  'Sonex': 'sonex',
  'ElektroStandard': 'elektrostandard',
  'Novotech': 'novotech',
  'Denkirs': 'denkirs',
  'Stluce': 'stluce'
};

// –û–±—Ä–∞—Ç–Ω—ã–π –º–∞–ø–ø–∏–Ω–≥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –±—Ä–µ–Ω–¥–∞ –ø–æ slug
const slugToBrandMap: Record<string, string> = Object.fromEntries(
  Object.entries(brandSlugMap).map(([brand, slug]) => [slug, brand])
);

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è slug –±—Ä–µ–Ω–¥–∞
const getBrandSlug = (brand: string): string => {
  return brandSlugMap[brand] || brand.toLowerCase();
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –±—Ä–µ–Ω–¥–∞ –ø–æ slug
const getBrandFromSlug = (slug: string): string => {
  return slugToBrandMap[slug] || slug;
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–≤—ã–Ω–µ—Å–µ–Ω–∞ –æ—Ç–¥–µ–ª—å–Ω–æ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ getServerSideProps)
const fetchProductsForPageStandalone = async (
  sourceName: string, 
  page: number = 1, 
  limit: number = 40,
  params: Record<string, any> = {},
  signal?: AbortSignal
): Promise<{
  products: ProductI[],
  totalPages: number,
  totalProducts: number
}> => {
  // –ë–∞–∑–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
  const baseParams = {
    ...params,
    limit,
    page, // –ü–µ—Ä–µ–¥–∞–µ–º –Ω—É–∂–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    source: sourceName || '',
    inStock: 'true',  // –í—Å–µ–≥–¥–∞ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–æ–≤–∞—Ä—ã –≤ –Ω–∞–ª–∏—á–∏–∏
  };
  
  console.log('–ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É', page, '—Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏:', baseParams);
  
  // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º sourceName –≤ —Å—Ç—Ä–æ–∫—É –¥–ª—è fetchProductsWithSorting
  const brand = sourceName || '–í—Å–µ —Ç–æ–≤–∞—Ä—ã';
  const brandStr = typeof brand === 'string' ? brand : Array.isArray(brand) ? brand[0] : '–í—Å–µ —Ç–æ–≤–∞—Ä—ã';
  
  try {
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–ø—Ä–æ—à–µ–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    const data = await fetchProductsWithSorting(brandStr, baseParams, signal);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥—Ä–æ–±–Ω—É—é –æ—Ç–ª–∞–¥–∫—É
    console.log('üîç –û–¢–í–ï–¢ –û–¢ API:', {
      page: page,
      totalPages: data.totalPages,
      totalProducts: data.totalProducts,
      productsCount: data.products?.length || 0,
      firstProduct: data.products?.[0]?.name || '–Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤'
    });
    
    // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–≤–∞—Ä—ã –≤ –Ω–∞–ª–∏—á–∏–∏
    const inStockProducts = data.products ? data.products.filter((product: ProductI) => 
      parseInt(product.stock as string, 10) > 0
    ) : [];
    
    console.log(`üì¶ –°—Ç—Ä–∞–Ω–∏—Ü–∞ ${page}: ${inStockProducts.length} –∏–∑ ${data.products?.length || 0} —Ç–æ–≤–∞—Ä–æ–≤ –≤ –Ω–∞–ª–∏—á–∏–∏`);
    console.log(`üìä –†–ï–ó–£–õ–¨–¢–ê–¢: totalPages = ${data.totalPages}, totalProducts = ${data.totalProducts}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–∞–≥–∏–Ω–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ
    if (data.totalPages <= 1 && data.totalProducts > 40) {
      console.warn('‚ö†Ô∏è –ü–†–û–ë–õ–ï–ú–ê: totalPages = 1, –Ω–æ —Ç–æ–≤–∞—Ä–æ–≤ –±–æ–ª—å—à–µ 40!', {
        totalProducts: data.totalProducts,
        totalPages: data.totalPages,
        limit: baseParams.limit,
        page: baseParams.page
      });
    }
    
    // üîß –ò–°–ü–†–ê–í–õ–Ø–ï–ú: –µ—Å–ª–∏ API –Ω–µ –≤–µ—Ä–Ω—É–ª –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –≤—ã—á–∏—Å–ª—è–µ–º –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–æ–≤
    let finalTotalProducts = data.totalProducts || 0;
    let finalTotalPages = data.totalPages || 1;
    
    // –ï—Å–ª–∏ API –≤–µ—Ä–Ω—É–ª 0 —Ç–æ–≤–∞—Ä–æ–≤, –Ω–æ —É –Ω–∞—Å –µ—Å—Ç—å —Ç–æ–≤–∞—Ä—ã, –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º
    if (finalTotalProducts === 0 && inStockProducts.length > 0) {
      console.warn('‚ö†Ô∏è API –≤–µ—Ä–Ω—É–ª totalProducts = 0, –Ω–æ —Ç–æ–≤–∞—Ä—ã –µ—Å—Ç—å. –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º...');
      
      // –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∏ —É –Ω–∞—Å –µ—Å—Ç—å —Ç–æ–≤–∞—Ä—ã, –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º —á—Ç–æ –≤—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤ –±–æ–ª—å—à–µ
      if (page === 1) {
        // –ï—Å–ª–∏ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –º–µ–Ω—å—à–µ –ª–∏–º–∏—Ç–∞ - —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
        if (inStockProducts.length < (baseParams.limit || 40)) {
          finalTotalProducts = inStockProducts.length;
          finalTotalPages = 1;
        } else {
          // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º —á—Ç–æ –µ—Å—Ç—å –µ—â–µ —Ç–æ–≤–∞—Ä—ã, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–∏–Ω–∏–º—É–º 2 —Å—Ç—Ä–∞–Ω–∏—Ü—ã
          finalTotalProducts = inStockProducts.length * 2; // –ü—Ä–∏–º–µ—Ä–Ω–∞—è –æ—Ü–µ–Ω–∫–∞
          finalTotalPages = Math.ceil(finalTotalProducts / (baseParams.limit || 40));
        }
      }
    } else if (finalTotalProducts > 0) {
      // –ï—Å–ª–∏ –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ –µ—Å—Ç—å, –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—ã
      const correctTotalPages = Math.ceil(finalTotalProducts / (baseParams.limit || 40));
      finalTotalPages = Math.max(correctTotalPages, 1);
    }
    
    console.log('üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ü–ê–ì–ò–ù–ê–¶–ò–ò:', {
      apiTotalPages: data.totalPages,
      apiTotalProducts: data.totalProducts,
      productsOnPage: inStockProducts.length,
      limit: baseParams.limit,
      finalTotalProducts: finalTotalProducts,
      finalTotalPages: finalTotalPages
    });
    
    return {
      products: inStockProducts,
      totalPages: finalTotalPages,
      totalProducts: finalTotalProducts
    };
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã:', error);
    return {
      products: [],
      totalPages: 1,
      totalProducts: 0
    };
  }
};

export type Brand = {
  name: string;
  categories: Category[];
};

// –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —Ç–∏–ø –¥–ª—è –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –ø–æ–∏—Å–∫–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
export type PopularSearch = {
  text: string;
  queryParam: string;
  forCategories?: string[];
  forBrands?: string[];
};

// –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ ProductCategory.tsx
const productCategories = [
  { 
    id: 'lyustra', 
    label: '–õ—é—Å—Ç—Ä—ã', 
    searchName: '–õ—é—Å—Ç—Ä—ã',
    subcategories: [
      { 
        label: '–õ—é—Å—Ç—Ä–∞ –ø–æ–¥–≤–µ—Å–Ω–∞—è', 
        searchName: '–ü–æ–¥–≤–µ—Å–Ω–∞—è –ª—é—Å—Ç—Ä–∞',
        aliases: ['–õ—é—Å—Ç—Ä–∞ –ø–æ–¥–≤–µ—Å–Ω–∞—è', '–ü–æ–¥–≤–µ—Å–Ω–∞—è –ª—é—Å—Ç—Ä–∞', '–ü–æ–¥–≤–µ—Å–Ω–æ–π —Å–≤–µ—Ç–∏–ª—å–Ω–∏–∫', '–°–≤–µ—Ç–∏–ª—å–Ω–∏–∫ –ø–æ–¥–≤–µ—Å–Ω–æ–π']
      },
      { 
        label: '–õ—é—Å—Ç—Ä–∞ –ø–æ—Ç–æ–ª–æ—á–Ω–∞—è', 
        searchName: '–ø–æ—Ç–æ–ª–æ—á–Ω–∞—è',
        aliases: ['–ü–æ—Ç–æ–ª–æ—á–Ω–∞—è –ª—é—Å—Ç—Ä–∞', '–ü–æ—Ç–æ–ª–æ—á–Ω—ã–π —Å–≤–µ—Ç–∏–ª—å–Ω–∏–∫']
      },
      { 
        label: '–õ—é—Å—Ç—Ä–∞ –Ω–∞ —à—Ç–∞–Ω–≥–µ', 
        searchName: '–õ—é—Å—Ç—Ä–∞ –Ω–∞ —à—Ç–∞–Ω–≥–µ',
        aliases: ['–õ—é—Å—Ç—Ä–∞ –Ω–∞ —à—Ç–∞–Ω–≥–µ', '–°–≤–µ—Ç–∏–ª—å–Ω–∏–∫ –Ω–∞ —à—Ç–∞–Ω–≥–µ']
      },
      { 
        label: '–õ—é—Å—Ç—Ä–∞ –∫–∞—Å–∫–∞–¥–Ω–∞—è', 
        searchName: '–õ—é—Å—Ç—Ä–∞ –∫–∞—Å–∫–∞–¥–Ω–∞—è',
        aliases: ['–õ—é—Å—Ç—Ä–∞ –∫–∞—Å–∫–∞–¥–Ω–∞—è', '–ö–∞—Å–∫–∞–¥–Ω–∞—è –ª—é—Å—Ç—Ä–∞', '–ö–∞—Å–∫–∞–¥–Ω—ã–π —Å–≤–µ—Ç–∏–ª—å–Ω–∏–∫']
      },
    ],
    isOpen: false
  },
  { 
    id: 'svetilnik', 
    label: '–°–≤–µ—Ç–∏–ª—å–Ω–∏–∫–∏', 
    searchName: '–°–≤–µ—Ç–∏–ª—å–Ω–∏–∫–∏',
    aliases: ['–°–≤–µ—Ç–∏–ª—å–Ω–∏–∫–∏', '–°–≤–µ—Ç–∏–ª—å–Ω–∏–∫', '–°–≤–µ—Ç–∏–ª—å–Ω–∏–∫–∏ –¥–ª—è –¥–æ–º–∞', '–û—Å–≤–µ—Ç–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–∏–±–æ—Ä—ã'],
    subcategories: [
      { 
        label: '–ü–æ—Ç–æ–ª–æ—á–Ω—ã–π —Å–≤–µ—Ç–∏–ª—å–Ω–∏–∫', 
        searchName: '–ü–æ—Ç–æ–ª–æ—á–Ω—ã–π —Å–≤–µ—Ç–∏–ª—å–Ω–∏–∫',
        aliases: ['–ü–æ—Ç–æ–ª–æ—á–Ω—ã–π —Å–≤–µ—Ç–∏–ª—å–Ω–∏–∫', '–°–≤–µ—Ç–∏–ª—å–Ω–∏–∫ –ø–æ—Ç–æ–ª–æ—á–Ω—ã–π', '–ù–∞–∫–ª–∞–¥–Ω–æ–π –ø–æ—Ç–æ–ª–æ—á–Ω—ã–π', '–ü–æ—Ç–æ–ª–æ—á–Ω–æ–µ –æ—Å–≤–µ—â–µ–Ω–∏–µ']
      },
      { 
        label: '–ü–æ–¥–≤–µ—Å–Ω–æ–π —Å–≤–µ—Ç–∏–ª—å–Ω–∏–∫', 
        searchName: '–ü–æ–¥–≤–µ—Å–Ω–æ–π —Å–≤–µ—Ç–∏–ª—å–Ω–∏–∫',
        aliases: ['–ü–æ–¥–≤–µ—Å–Ω–æ–π —Å–≤–µ—Ç–∏–ª—å–Ω–∏–∫', '–°–≤–µ—Ç–∏–ª—å–Ω–∏–∫ –ø–æ–¥–≤–µ—Å–Ω–æ–π', '–ü–æ–¥–≤–µ—Å–Ω–æ–π', '–ü–æ–¥–≤–µ—Å']
      },
      { 
        label: '–ù–∞—Å—Ç–µ–Ω–Ω—ã–π —Å–≤–µ—Ç–∏–ª—å–Ω–∏–∫', 
        searchName: '–ù–∞—Å—Ç–µ–Ω–Ω—ã–π —Å–≤–µ—Ç–∏–ª—å–Ω–∏–∫',
        aliases: ['–ù–∞—Å—Ç–µ–Ω–Ω—ã–π —Å–≤–µ—Ç–∏–ª—å–Ω–∏–∫', '–°–≤–µ—Ç–∏–ª—å–Ω–∏–∫ –Ω–∞—Å—Ç–µ–Ω–Ω—ã–π', '–ù–∞—Å—Ç–µ–Ω–Ω—ã–π', '–ù–∞—Å—Ç–µ–Ω–Ω—ã–π —Å–≤–µ—Ç–∏–ª—å–Ω–∏–∫']
      },
      { 
        label: '–í—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã–π —Å–≤–µ—Ç–∏–ª—å–Ω–∏–∫', 
        searchName: '–°–≤–µ—Ç–∏–ª—å–Ω–∏–∫ –≤—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã–π',
        aliases: ['–í—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã–π —Å–≤–µ—Ç–∏–ª—å–Ω–∏–∫', '–°–≤–µ—Ç–∏–ª—å–Ω–∏–∫ –≤—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã–π', '–í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π —Å–≤–µ—Ç–∏–ª—å–Ω–∏–∫', '–¢–æ—á–µ—á–Ω—ã–π –≤—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã–π']
      },
      { 
        label: '–ù–∞–∫–ª–∞–¥–Ω–æ–π —Å–≤–µ—Ç–∏–ª—å–Ω–∏–∫', 
        searchName: '–°–≤–µ—Ç–∏–ª—å–Ω–∏–∫ –Ω–∞–∫–ª–∞–¥–Ω–æ–π',
        aliases: ['–ù–∞–∫–ª–∞–¥–Ω–æ–π —Å–≤–µ—Ç–∏–ª—å–Ω–∏–∫', '–°–≤–µ—Ç–∏–ª—å–Ω–∏–∫ –Ω–∞–∫–ª–∞–¥–Ω–æ–π', '–ù–∞–∫–ª–∞–¥–Ω–æ–π', '–°–≤–µ—Ç–∏–ª—å–Ω–∏–∫ –Ω–∞—Ä—É–∂–Ω—ã–π']
      },
      { 
        label: '–¢—Ä–µ–∫–æ–≤—ã–π —Å–≤–µ—Ç–∏–ª—å–Ω–∏–∫', 
        searchName: '—Ç—Ä–µ–∫–æ–≤—ã–π —Å–≤–µ—Ç–∏–ª—å–Ω–∏–∫',
        aliases: ['–¢—Ä–µ–∫–æ–≤—ã–π —Å–≤–µ—Ç–∏–ª—å–Ω–∏–∫', '–°–≤–µ—Ç–∏–ª—å–Ω–∏–∫ —Ç—Ä–µ–∫–æ–≤—ã–π', '–¢—Ä–µ–∫ —Å–≤–µ—Ç–∏–ª—å–Ω–∏–∫', '–°–≤–µ—Ç–∏–ª—å–Ω–∏–∫ –¥–ª—è —à–∏–Ω–æ–ø—Ä–æ–≤–æ–¥–∞']
      },
      { 
        label: '–¢–æ—á–µ—á–Ω—ã–π —Å–≤–µ—Ç–∏–ª—å–Ω–∏–∫', 
        searchName: '–¢–æ—á–µ—á–Ω—ã–π —Å–≤–µ—Ç–∏–ª—å–Ω–∏–∫',
        aliases: ['–¢–æ—á–µ—á–Ω—ã–π —Å–≤–µ—Ç–∏–ª—å–Ω–∏–∫', '–°–ø–æ—Ç',  '–°–≤–µ—Ç–∏–ª—å–Ω–∏–∫ —Ç–æ—á–µ—á–Ω—ã–π', '–î–∞—É–Ω–ª–∞–π—Ç—ã']
      },
    ],
    isOpen: false
  },
  { 
    id: 'bra', 
    label: '–ë—Ä–∞', 
    searchName: '–ù–∞—Å—Ç–µ–Ω–Ω—ã–π —Å–≤–µ—Ç–∏–ª—å–Ω–∏–∫',
    aliases: ['–ë—Ä–∞', '–ù–∞—Å—Ç–µ–Ω–Ω—ã–π —Å–≤–µ—Ç–∏–ª—å–Ω–∏–∫', '–ù–∞—Å—Ç–µ–Ω–Ω—ã–µ —Å–≤–µ—Ç–∏–ª—å–Ω–∏–∫–∏'],
    isOpen: false
  },
  { 
    id: 'torsher', 
    label: '–¢–æ—Ä—à–µ—Ä', 
    searchName: '–¢–æ—Ä—à–µ—Ä',
    aliases: ['–¢–æ—Ä—à–µ—Ä', '–ù–∞–ø–æ–ª—å–Ω—ã–π —Å–≤–µ—Ç–∏–ª—å–Ω–∏–∫', '–°–≤–µ—Ç–∏–ª—å–Ω–∏–∫ –Ω–∞–ø–æ–ª—å–Ω—ã–π', '–ù–∞–ø–æ–ª—å–Ω–∞—è –ª–∞–º–ø–∞', '–¢–æ—Ä—à–µ—Ä–Ω—ã–π —Å–≤–µ—Ç–∏–ª—å–Ω–∏–∫'],
    isOpen: false
  },
  { 
    id: 'nastolnaya', 
    label: '–ù–∞—Å—Ç–æ–ª—å–Ω–∞—è –ª–∞–º–ø–∞', 
    searchName: '–ù–∞—Å—Ç–æ–ª—å–Ω–∞—è –ª–∞–º–ø–∞',
    aliases: ['–ù–∞—Å—Ç–æ–ª—å–Ω–∞—è –ª–∞–º–ø–∞', '–õ–∞–º–ø–∞ –Ω–∞—Å—Ç–æ–ª—å–Ω–∞—è', '–ù–∞—Å—Ç–æ–ª—å–Ω—ã–π —Å–≤–µ—Ç–∏–ª—å–Ω–∏–∫', '–°–≤–µ—Ç–∏–ª—å–Ω–∏–∫ –Ω–∞—Å—Ç–æ–ª—å–Ω—ã–π', '–õ–∞–º–ø–∞ –¥–ª—è —Å—Ç–æ–ª–∞'],
    isOpen: false
  },
 
  { 
    id: 'smart', 
    label: '–£–º–Ω—ã–π —Å–≤–µ—Ç', 
    searchName: '–£–º–Ω—ã–π —Å–≤–µ—Ç',
    aliases: ['–£–º–Ω—ã–π —Å–≤–µ—Ç', 'Smart –æ—Å–≤–µ—â–µ–Ω–∏–µ', '–£–º–Ω–æ–µ –æ—Å–≤–µ—â–µ–Ω–∏–µ', '–°–º–∞—Ä—Ç —Å–≤–µ—Ç–∏–ª—å–Ω–∏–∫–∏', '–°–≤–µ—Ç–∏–ª—å–Ω–∏–∫–∏ —Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º'],
    isOpen: false
  },
  { 
    id: 'profil', 
    label: '–ü—Ä–æ—Ñ–∏–ª—å –¥–ª—è –ª–µ–Ω—Ç—ã', 
    searchName: '–ü—Ä–æ—Ñ–∏–ª—å –¥–ª—è –ª–µ–Ω—Ç—ã',
    aliases: ['–ü—Ä–æ—Ñ–∏–ª—å –¥–ª—è –ª–µ–Ω—Ç—ã', '–ê–ª—é–º–∏–Ω–∏–µ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å', '–ü—Ä–æ—Ñ–∏–ª—å –¥–ª—è —Å–≤–µ—Ç–æ–¥–∏–æ–¥–Ω–æ–π –ª–µ–Ω—Ç—ã', 'LED –ø—Ä–æ—Ñ–∏–ª—å'],
    isOpen: false
  },
  { 
    id: 'lenta', 
    label: '–°–≤–µ—Ç–æ–¥–∏–æ–¥–Ω–∞—è –ª–µ–Ω—Ç–∞', 
    searchName: '–°–≤–µ—Ç–æ–¥–∏–æ–¥–Ω–∞—è –ª–µ–Ω—Ç–∞',
    aliases: ['–°–≤–µ—Ç–æ–¥–∏–æ–¥–Ω–∞—è –ª–µ–Ω—Ç–∞', 'LED –ª–µ–Ω—Ç–∞', '–õ–µ–Ω—Ç–∞ —Å–≤–µ—Ç–æ–¥–∏–æ–¥–Ω–∞—è', 'LED –ø–æ–¥—Å–≤–µ—Ç–∫–∞', '–°–≤–µ—Ç–æ–¥–∏–æ–¥–Ω–∞—è –ø–æ–¥—Å–≤–µ—Ç–∫–∞'],
    isOpen: false
  },
  { 
    id: 'ulichni', 
    label: '–£–ª–∏—á–Ω—ã–π —Å–≤–µ—Ç–∏–ª—å–Ω–∏–∫', 
    searchName: '–£–ª–∏—á–Ω—ã–µ —Å–≤–µ—Ç–∏–ª—å–Ω–∏–∫',
    subcategories: [
      { label: '–£–ª–∏—á–Ω—ã–π —Å–≤–µ—Ç–∏–ª—å–Ω–∏–∫', searchName: '–£–ª–∏—á–Ω—ã–π —Å–≤–µ—Ç–∏–ª—å–Ω–∏–∫' },
      { label: '–ù–∞—Å—Ç–µ–Ω–Ω—ã–π —É–ª–∏—á–Ω—ã–π —Å–≤–µ—Ç–∏–ª—å–Ω–∏–∫', searchName: '–ù–∞—Å—Ç–µ–Ω–Ω—ã–π —É–ª–∏—á–Ω—ã–π —Å–≤–µ—Ç–∏–ª—å–Ω–∏–∫' },
      { label: '–ì—Ä—É–Ω—Ç–æ–≤—ã–π —Å–≤–µ—Ç–∏–ª—å–Ω–∏–∫', searchName: '–ì—Ä—É–Ω—Ç–æ–≤—ã–π —Å–≤–µ—Ç–∏–ª—å–Ω–∏–∫' },
      { label: '–õ–∞–Ω–¥—à–∞—Ñ—Ç–Ω—ã–π —Å–≤–µ—Ç–∏–ª—å–Ω–∏–∫', searchName: '–õ–∞–Ω–¥—à–∞—Ñ—Ç–Ω—ã–π —Å–≤–µ—Ç–∏–ª—å–Ω–∏–∫' },
      { label: '–ü–∞—Ä–∫–æ–≤—ã–π —Å–≤–µ—Ç–∏–ª—å–Ω–∏–∫', searchName: '–ü–∞—Ä–∫–æ–≤—ã–π —Å–≤–µ—Ç–∏–ª—å–Ω–∏–∫' },
    ],
    isOpen: false
  },
  { 
    id: 'komplektuyushie', 
    label: '–ö–æ–º–ø–ª–µ–∫—Ç—É—é—â–∏–µ', 
    searchName: '–ö–æ–º–ø–ª–µ–∫—Ç—É—é—â–∏–µ',
    aliases: ['–ö–æ–º–ø–ª–µ–∫—Ç—É—é—â–∏–µ', '–ö–æ–º–ø–ª–µ–∫—Ç—É—é—â–∏–µ –¥–ª—è —Å–≤–µ—Ç–∏–ª—å–Ω–∏–∫–æ–≤', '–ö–æ–º–ø–ª–µ–∫—Ç—É—é—â–∏–µ –¥–ª—è –æ—Å–≤–µ—â–µ–Ω–∏—è'],
    subcategories: [
      { 
        label: '–ö–æ–Ω–Ω–µ–∫—Ç–æ—Ä—ã', 
        searchName: '–ö–æ–Ω–Ω–µ–∫—Ç–æ—Ä—ã',
        aliases: ['–ö–æ–Ω–Ω–µ–∫—Ç–æ—Ä—ã', '–ö–æ–Ω–Ω–µ–∫—Ç–æ—Ä', '–ö–æ–Ω–Ω–µ–∫—Ç–æ—Ä—ã –¥–ª—è —Å–≤–µ—Ç–∏–ª—å–Ω–∏–∫–æ–≤', '–ö–æ–Ω–Ω–µ–∫—Ç–æ—Ä—ã –¥–ª—è –æ—Å–≤–µ—â–µ–Ω–∏—è']
      },
      { 
        label: '–®–Ω—É—Ä—ã', 
        searchName: '–®–Ω—É—Ä—ã',
        aliases: ['–®–Ω—É—Ä—ã', '–®–Ω—É—Ä', '–®–Ω—É—Ä—ã –¥–ª—è —Å–≤–µ—Ç–∏–ª—å–Ω–∏–∫–æ–≤', '–®–Ω—É—Ä—ã –¥–ª—è –æ—Å–≤–µ—â–µ–Ω–∏—è']
      },
      { 
        label: '–ë–ª–æ–∫ –ø–∏—Ç–∞–Ω–∏—è', 
        searchName: '–ë–ª–æ–∫ –ø–∏—Ç–∞–Ω–∏—è',
        aliases: ['–ë–ª–æ–∫ –ø–∏—Ç–∞–Ω–∏—è', '–ë–ª–æ–∫ –ø–∏—Ç–∞–Ω–∏—è –¥–ª—è —Å–≤–µ—Ç–∏–ª—å–Ω–∏–∫–æ–≤', '–ë–ª–æ–∫ –ø–∏—Ç–∞–Ω–∏—è –¥–ª—è –æ—Å–≤–µ—â–µ–Ω–∏—è']
      },
    ],
    isOpen: false
  },
];

// –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –≤—Å–µ—Ö –±—Ä–µ–Ω–¥–æ–≤
const standardCategories = [
  { label: '–í—Å–µ —Ç–æ–≤–∞—Ä—ã', searchName: '–í—Å–µ —Ç–æ–≤–∞—Ä—ã' },
  { label: '–õ—é—Å—Ç—Ä–∞ –ø–æ–¥–≤–µ—Å–Ω–∞—è', searchName: '–õ—é—Å—Ç—Ä–∞ –ø–æ–¥–≤–µ—Å–Ω–∞—è' },
  { label: '–õ—é—Å—Ç—Ä–∞ –ø–æ—Ç–æ–ª–æ—á–Ω–∞—è', searchName: '–õ—é—Å—Ç—Ä–∞ –ø–æ—Ç–æ–ª–æ—á–Ω–∞—è' },
  { label: '–õ—é—Å—Ç—Ä–∞ –∫–∞—Å–∫–∞–¥–Ω–∞—è', searchName: '–õ—é—Å—Ç—Ä–∞ –∫–∞—Å–∫–∞–¥–Ω–∞—è' },
  { label: '–õ—é—Å—Ç—Ä–∞ —Ö—Ä—É—Å—Ç–∞–ª—å–Ω–∞—è', searchName: '–õ—é—Å—Ç—Ä–∞ —Ö—Ä—É—Å—Ç–∞–ª—å–Ω–∞—è' },
  { label: '–¢–æ—á–µ—á–Ω—ã–π —Å–≤–µ—Ç–∏–ª—å–Ω–∏–∫', searchName: '–¢–æ—á–µ—á–Ω—ã–π —Å–≤–µ—Ç–∏–ª—å–Ω–∏–∫' },
  { label: '–¢—Ä–µ–∫–æ–≤—ã–π —Å–≤–µ—Ç–∏–ª—å–Ω–∏–∫', searchName: '–¢—Ä–µ–∫–æ–≤—ã–π —Å–≤–µ—Ç–∏–ª—å–Ω–∏–∫' },
  { label: '–ù–∞–∫–ª–∞–¥–Ω–æ–π —Å–≤–µ—Ç–∏–ª—å–Ω–∏–∫', searchName: '–ù–∞–∫–ª–∞–¥–Ω–æ–π —Å–≤–µ—Ç–∏–ª—å–Ω–∏–∫' },
  { label: '–í—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã–π —Å–≤–µ—Ç–∏–ª—å–Ω–∏–∫', searchName: '–í—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã–π —Å–≤–µ—Ç–∏–ª—å–Ω–∏–∫' },
  { label: '–ü–æ–¥–≤–µ—Å–Ω–æ–π —Å–≤–µ—Ç–∏–ª—å–Ω–∏–∫', searchName: '–ü–æ–¥–≤–µ—Å–Ω–æ–π —Å–≤–µ—Ç–∏–ª—å–Ω–∏–∫' },
  { label: '–ü–æ—Ç–æ–ª–æ—á–Ω—ã–π —Å–≤–µ—Ç–∏–ª—å–Ω–∏–∫', searchName: '–ü–æ—Ç–æ–ª–æ—á–Ω—ã–π —Å–≤–µ—Ç–∏–ª—å–Ω–∏–∫' },
  { label: '–ù–∞—Å—Ç–µ–Ω–Ω—ã–π —Å–≤–µ—Ç–∏–ª—å–Ω–∏–∫', searchName: '–ù–∞—Å—Ç–µ–Ω–Ω—ã–π —Å–≤–µ—Ç–∏–ª—å–Ω–∏–∫' },
  { label: '–ë—Ä–∞', searchName: '–ë—Ä–∞' },
  { label: '–ù–∞—Å—Ç–æ–ª—å–Ω–∞—è –ª–∞–º–ø–∞', searchName: '–ù–∞—Å—Ç–æ–ª—å–Ω–∞—è –ª–∞–º–ø–∞' },
  { label: '–¢–æ—Ä—à–µ—Ä', searchName: '–¢–æ—Ä—à–µ—Ä' },
  { label: '–£–ª–∏—á–Ω—ã–π —Å–≤–µ—Ç–∏–ª—å–Ω–∏–∫', searchName: '–£–ª–∏—á–Ω—ã–π —Å–≤–µ—Ç–∏–ª—å–Ω–∏–∫' },
  { label: '–õ–∞–Ω–¥—à–∞—Ñ—Ç–Ω—ã–π —Å–≤–µ—Ç–∏–ª—å–Ω–∏–∫', searchName: '–õ–∞–Ω–¥—à–∞—Ñ—Ç–Ω—ã–π —Å–≤–µ—Ç–∏–ª—å–Ω–∏–∫' },
  { label: '–ì—Ä—É–Ω—Ç–æ–≤—ã–π —Å–≤–µ—Ç–∏–ª—å–Ω–∏–∫', searchName: '–ì—Ä—É–Ω—Ç–æ–≤—ã–π —Å–≤–µ—Ç–∏–ª—å–Ω–∏–∫' },
  { label: '–°–≤–µ—Ç–æ–¥–∏–æ–¥–Ω–∞—è –ª–µ–Ω—Ç–∞', searchName: '–°–≤–µ—Ç–æ–¥–∏–æ–¥–Ω–∞—è –ª–µ–Ω—Ç–∞' },
  { label: '–ü—Ä–æ—Ñ–∏–ª—å –¥–ª—è –ª–µ–Ω—Ç—ã', searchName: '–ü—Ä–æ—Ñ–∏–ª—å –¥–ª—è –ª–µ–Ω—Ç—ã' },
  { label: '–ë–ª–æ–∫ –ø–∏—Ç–∞–Ω–∏—è', searchName: '–ë–ª–æ–∫ –ø–∏—Ç–∞–Ω–∏—è' },
  { label: '–ö–æ–Ω–Ω–µ–∫—Ç–æ—Ä—ã', searchName: '–ö–æ–Ω–Ω–µ–∫—Ç–æ—Ä—ã' },
  { label: '–®–∏–Ω–æ–ø—Ä–æ–≤–æ–¥', searchName: '–®–∏–Ω–æ–ø—Ä–æ–≤–æ–¥' },
];

// –ú–∞—Å—Å–∏–≤ –±—Ä–µ–Ω–¥–æ–≤ —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
const brands: Brand[] = [
  {
    name: 'Artelamp',
    categories: standardCategories,
  },
  {
    name: 'KinkLight',
    categories: standardCategories,
  },
  {
    name: 'Favourite',
    categories: standardCategories,
  },
  {
    name: 'Lumion',
    categories: standardCategories,
  },
  {
    name: 'LightStar',
    categories: standardCategories,
  },
  {
    name: 'OdeonLight',
    categories: standardCategories,
  },
  {
    name: 'Maytoni',
    categories: standardCategories,
  },
  {
    name: 'Sonex',
    categories: standardCategories,
  },
  {
    name: 'ElektroStandard',
    categories: standardCategories,
  },
  {
    name: 'Novotech',
    categories: standardCategories,
  },
  {
    name: 'Denkirs',
    categories: standardCategories,
  },
  {
    name: 'Stluce',
    categories: standardCategories,
  },
];







// --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã (–ø–µ—Ä–µ–º–µ—â–∞–µ–º –í–´–®–ï normalizeUrlServerSafe) ---
const IMAGE_SIZES = { THUMBNAIL: 20, SMALL: 100, MEDIUM: 300, LARGE: 600 }; // –£–≤–µ–ª–∏—á–∏–ª —Ä–∞–∑–º–µ—Ä—ã –¥–ª—è –ª—É—á—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
const QUALITY_LEVELS = { LOW: 5, MEDIUM: 30, HIGH: 50, VERY_HIGH: 75 }; // –ü–æ–≤—ã—Å–∏–ª –∫–∞—á–µ—Å—Ç–≤–æ –¥–ª—è –ª—É—á—à–µ–≥–æ –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –≤–æ—Å–ø—Ä–∏—è—Ç–∏—è
const IMAGE_FORMATS = { AVIF: 'avif', WEBP: 'webp', JPG: 'jpg', PNG: 'png' }; // –§–æ—Ä–º–∞—Ç—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π

// –£–ª—É—á—à–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è URL –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ LCP
const normalizeUrlServerSafe = (originalUrl: string, isLCP: boolean = false): string | null => {
  if (!originalUrl) return null;
  const url = originalUrl.trim();

  // --- –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ –≤—ã–±–æ—Ä–∞ —Ñ–æ—Ä–º–∞—Ç–∞/–∫–∞—á–µ—Å—Ç–≤–∞ –¥–ª—è LCP ---
  let format: string;
  let quality: number;
  let size: number;
  
  if (isLCP) { 
    // –î–ª—è LCP –∏—Å–ø–æ–ª—å–∑—É–µ–º WebP —Å –≤—ã—Å–æ–∫–∏–º –∫–∞—á–µ—Å—Ç–≤–æ–º –∏ —Å—Ä–µ–¥–Ω–∏–º —Ä–∞–∑–º–µ—Ä–æ–º
    // –≠—Ç–æ –æ–±–µ—Å–ø–µ—á–∏—Ç —Ö–æ—Ä–æ—à–∏–π –±–∞–ª–∞–Ω—Å –º–µ–∂–¥—É —Å–∫–æ—Ä–æ—Å—Ç—å—é –∑–∞–≥—Ä—É–∑–∫–∏ –∏ –∫–∞—á–µ—Å—Ç–≤–æ–º
    format = IMAGE_FORMATS.WEBP;
    quality = QUALITY_LEVELS.HIGH; 
    size = IMAGE_SIZES.MEDIUM; // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ä–µ–¥–Ω–∏–π —Ä–∞–∑–º–µ—Ä –¥–ª—è LCP –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
  } else {
    // –î–ª—è –æ–±—ã—á–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏—Å–ø–æ–ª—å–∑—É–µ–º JPG —Å –æ—á–µ–Ω—å –≤—ã—Å–æ–∫–∏–º –∫–∞—á–µ—Å—Ç–≤–æ–º
    format = IMAGE_FORMATS.JPG;
    quality = QUALITY_LEVELS.VERY_HIGH;
    size = IMAGE_SIZES.SMALL; // –ú–µ–Ω—å—à–∏–π —Ä–∞–∑–º–µ—Ä –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
  }

  // –î–ª—è —Ä–∞–∑–Ω—ã—Ö –¥–æ–º–µ–Ω–æ–≤ –ø—Ä–∏–º–µ–Ω—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é
  const isAllowedDomain = url.includes('lightstar.ru') || url.includes('moresvet.ru') || url.includes('divinare.ru');

  if (isAllowedDomain) {
    const baseUrl = url.split('?')[0];
    let optimizedUrl = `${baseUrl}?format=${format}&quality=${quality}&width=${size}`;
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤
    if (format === 'jpg') {
      optimizedUrl += '&progressive=true'; // –ü—Ä–æ–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π JPG –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    }
    
    // –í—Å–µ–≥–¥–∞ —É–¥–∞–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –¥–ª—è —É–º–µ–Ω—å—à–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞
    optimizedUrl += '&strip=true';
    
    // –î–ª—è LCP –Ω–µ –¥–æ–±–∞–≤–ª—è–µ–º cacheBust, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—é
    if (!isLCP) {
      optimizedUrl += `&cacheBust=${Math.floor(Date.now() / 3600000)}`;
    }
    
    return optimizedUrl;
  }

  // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π URL, –µ—Å–ª–∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –Ω–µ –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è
  return url;
};

interface CatalogIndexProps {
  initialProducts: ProductI[];
  initialTotalPages: number;
  initialTotalProducts: number;
  source?: string;
  lcpImageUrls: string[]; // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–ø –¥–ª—è LCP URL
}





const CatalogIndex: React.FC<CatalogIndexProps> = ({
  initialProducts,
  initialTotalPages,
  initialTotalProducts,
  source,
  lcpImageUrls // –ü—Ä–∏–Ω–∏–º–∞–µ–º LCP URL
}) => {
  const router = useRouter();
  const [products, setProducts] = useState<ProductI[]>(initialProducts.slice().reverse());
  const [isLoading, setIsLoading] = useState<boolean>(false);
  const [totalPages, setTotalPages] = useState<number>(initialTotalPages);
  const [totalProducts, setTotalProducts] = useState<number>(initialTotalProducts);
  

  const [viewMode, setViewMode] = useState<'grid' | 'list' | 'table'>('grid');
  const [currentPage, setCurrentPage] = useState<number>(1);
  // –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –º–µ–∂–¥—É –æ–±—ã—á–Ω—ã–º –∏ –∫–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–Ω—ã–º —Ä–µ–∂–∏–º–æ–º –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
  const [displayMode, setDisplayMode] = useState<'product' | 'collection'>('product');
  const limit = 40;
  
  
  
  // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏, –∞–Ω–∞–ª–æ–≥–∏—á–Ω—ã–µ [name].tsx
  const [selectedBrand, setSelectedBrand] = useState<Brand | null>(null);
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–µ–∑ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, —á—Ç–æ–±—ã –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—Ç–∏—Ç—å —Å–±—Ä–æ—Å –Ω–∞ "–õ—é—Å—Ç—Ä–∞"
  const [selectedCategory, setSelectedCategory] = useState<Category | null>(null);
  const [minPrice, setMinPrice] = useState<number>(10);
  const [maxPrice, setMaxPrice] = useState<number>(1000000);
  const [selectedColor, setSelectedColor] = useState<string | null>(null);
  const [selectedMaterial, setSelectedMaterial] = useState<string | null>(null);
  const [selectedRating, setSelectedRating] = useState<number | null>(null);
  const [sortOrder, setSortOrder] = useState<'asc' | 'desc' | 'popularity' | 'newest' | 'random' | null>(null);
  const [searchQuery, setSearchQuery] = useState<string>('');
  const [isFilterOpen, setIsFilterOpen] = useState(false);
  const [isMobileFilterOpen, setIsMobileFilterOpen] = useState(false);
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Å –∞–∫–∫–æ—Ä–¥–µ–æ–Ω–æ–º
  const [productCategoriesState, setProductCategoriesState] = useState(productCategories);
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤
  const [extractedFilters, setExtractedFilters] = useState<{
    colors: string[];
    materials: string[];
    features: string[];
    styles: string[];
    places: string[];
  }>({
    colors: [],
    materials: [],
    features: [],
    styles: [],
    places: []
  });

  // –°–æ–∑–¥–∞–µ–º ref –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ AbortController
  const fetchAbortController = useRef<AbortController | null>(null);

  // --- –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ isClient ---
  const [isClient, setIsClient] = useState(false);
  // -------------------------------------------

  // –ü—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –±—Ä–µ–Ω–¥ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ category –≤ URL
  useEffect(() => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä category –≤ URL
    const hasCategory = router.isReady && router.query.category;
    
    // –ï—Å–ª–∏ –µ—Å—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä source –Ω–æ –Ω–µ—Ç category, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –±—Ä–µ–Ω–¥–∞
    if (router.isReady && router.query.source && !hasCategory) {
      const sourceSlug = router.query.source as string;
      const sourceName = getBrandFromSlug(sourceSlug);
      
      // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è OdeonLight
      let brandToSearch = sourceName;
      if (sourceName.toLowerCase() === 'odeonlight') {
        brandToSearch = 'OdeonLight';
      }
      const foundBrand = brands.find(b => b.name.toLowerCase() === sourceName.toLowerCase());
      
      if (foundBrand) {
        setSelectedBrand(foundBrand);
        
        // –ò—â–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é "–í—Å–µ —Ç–æ–≤–∞—Ä—ã" –≤ —Å–ø–∏—Å–∫–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –±—Ä–µ–Ω–¥–∞
        const allProductsCategory = foundBrand.categories.find(cat => cat.label === '–í—Å–µ —Ç–æ–≤–∞—Ä—ã');
        
        if (allProductsCategory) {
          // –ï—Å–ª–∏ –µ—Å—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—è "–í—Å–µ —Ç–æ–≤–∞—Ä—ã", –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ—ë
          setSelectedCategory(allProductsCategory);
          
          // –û–±–Ω–æ–≤–ª—è–µ–º URL —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "–í—Å–µ —Ç–æ–≤–∞—Ä—ã"
          router.push({
            pathname: router.pathname,
            query: { 
              ...router.query, 
              category: getCategorySlug(allProductsCategory.searchName || allProductsCategory.label),
              page: 1 
            },
          }, undefined, { shallow: true });
          
          // –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤ –±—Ä–µ–Ω–¥–∞
          fetchProducts(sourceName, 1);
        } else if (foundBrand.categories.length > 0) {
          // –ï—Å–ª–∏ –Ω–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "–í—Å–µ —Ç–æ–≤–∞—Ä—ã", –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
          const firstCategory = foundBrand.categories[0];
          setSelectedCategory(firstCategory);
          
          // –û–±–Ω–æ–≤–ª—è–µ–º URL —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
          router.push({
            pathname: router.pathname,
            query: { 
              ...router.query, 
              category: firstCategory.searchName || firstCategory.label,
              page: 1 
            },
          }, undefined, { shallow: true });
          
          // –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É —Å –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π
          fetchProducts(sourceName, 1);
        }
      }
    }
    // –ï—Å–ª–∏ –Ω–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ URL –∏ –Ω–µ—Ç source, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    else if (!hasCategory && !router.query.source) {
      // –ë—Ä–µ–Ω–¥ "–í—Å–µ —Ç–æ–≤–∞—Ä—ã" –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
      setSelectedBrand(brands[0]);
      
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–≤—É—é —Ä–µ–∞–ª—å–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ —Å–ø–∏—Å–∫–∞
      if (brands[0].categories.length > 0) {
        const firstRealCategory = brands[0].categories.find(cat => cat.label !== '–í—Å–µ —Ç–æ–≤–∞—Ä—ã') || brands[0].categories[0];
        setSelectedCategory(firstRealCategory);
      }
    }
  }, [source, router.isReady, router.query]);

  // --- –î–æ–±–∞–≤–ª—è–µ–º useEffect –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ isClient ---
  useEffect(() => {
    setIsClient(true);
  }, []);
  // -------------------------------------------

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
  useEffect(() => {
    if (router.isReady) {
      const { source: urlSource, page, category, sort, name } = router.query;
      
      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º slug –±—Ä–µ–Ω–¥–∞ –æ–±—Ä–∞—Ç–Ω–æ –≤ –Ω–∞–∑–≤–∞–Ω–∏–µ
      let sourceName = '';
      if (urlSource || source) {
        const brandSlug = urlSource || source || '';
        sourceName = getBrandFromSlug(brandSlug as string);
      }
      
      const pageNumber = page ? parseInt(page as string, 10) : 1;
      
      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º slug –æ–±—Ä–∞—Ç–Ω–æ –≤ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
      let categoryName = '';
      if (category) {
        const categorySlug = Array.isArray(category) ? category[0] : category;
        categoryName = getCategoryFromSlug(categorySlug);
      }
      
      const productName = name ? (Array.isArray(name) ? name[0] : name as string) : '';
      const sortValue = sort ? (Array.isArray(sort) ? sort[0] : sort) : 'newest';
      
      // –û–±–Ω–æ–≤–ª—è–µ–º currentPage –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å URL
      setCurrentPage(pageNumber);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—É—â–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è "–õ—é—Å—Ç—Ä–∞" –±–µ–∑ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
      if (categoryName === '–õ—é—Å—Ç—Ä–∞' && !router.query.subcategory) {
        // –ù–∞—Ö–æ–¥–∏–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é "–õ—é—Å—Ç—Ä–∞" –≤ –º–∞—Å—Å–∏–≤–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        const lustraCategory = productCategories.find(cat => cat.label === '–õ—é—Å—Ç—Ä–∞' || cat.searchName === '–õ—é—Å—Ç—Ä–∞');
        
        // –ï—Å–ª–∏ –Ω–∞—à–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏ —É –Ω–µ—ë –µ—Å—Ç—å –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        if (lustraCategory && lustraCategory.subcategories && lustraCategory.subcategories.length > 0) {
          // –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—É—é –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é
          const firstSubcategory = lustraCategory.subcategories[0];
          
          console.log('–ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º —Å "–õ—é—Å—Ç—Ä–∞" –Ω–∞ –ø–µ—Ä–≤—É—é –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é:', firstSubcategory.label);
          
          // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –ø–µ—Ä–≤—É—é –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é
          router.push({
            pathname: router.pathname,
            query: { 
              ...router.query,
              category: firstSubcategory.searchName,
              subcategory: firstSubcategory.label,
              page: '1'
            },
          }, undefined, { shallow: true });
          
          // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–ª—å–Ω–µ–π—à–µ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ useEffect
          return;
        }
      }
      
      // –ù–∞—Ö–æ–¥–∏–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ —Å–ø–∏—Å–∫–∞, —á—Ç–æ–±—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ–±—ä–µ–∫—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
      const matchedCategory = findCategoryByName(categoryName);
      
      if (matchedCategory) {
        setSelectedCategory(matchedCategory);
      } else if (categoryName) {
        // –ï—Å–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –Ω–æ —É–∫–∞–∑–∞–Ω–∞, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –æ–±—ä–µ–∫—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        setSelectedCategory({
          label: categoryName,
          searchName: categoryName
        });
      } else {
        setSelectedCategory(null);
      }
      
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
      if (sortValue === 'asc' || sortValue === 'desc' || sortValue === 'popularity' || sortValue === 'newest' || sortValue === 'random') {
        setSortOrder(sortValue);
      }
      
      // –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É —Ç–æ–≤–∞—Ä–æ–≤
      fetchProducts(sourceName as string, pageNumber);
    }
  }, [router.isReady, router.query]);

  // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ –∏–º–µ–Ω–∏
  const findCategoryByName = (name: string): Category | null => {
    if (!name) return null;
    
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∏–º—è –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    const lowerName = name.toLowerCase();
    
    // –ò—â–µ–º –≤–æ –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö –≤—Å–µ—Ö –±—Ä–µ–Ω–¥–æ–≤
    for (const brand of brands) {
      for (const category of brand.categories) {
        if (
          category.label.toLowerCase() === lowerName ||
          category.searchName.toLowerCase() === lowerName ||
          (category.aliases && category.aliases.some(alias => alias.toLowerCase() === lowerName))
        ) {
          return category;
        }
        
        // –¢–∞–∫–∂–µ –∏—â–µ–º –≤ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
        if (category.subcategories) {
          for (const subcategory of category.subcategories) {
            if (
              subcategory.label.toLowerCase() === lowerName ||
              subcategory.searchName.toLowerCase() === lowerName ||
              (subcategory.aliases && subcategory.aliases.some(alias => alias.toLowerCase() === lowerName))
            ) {
              return subcategory;
            }
          }
        }
      }
    }
    
    return null;
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  const handleCategoryChange = (category: Category) => {
    // –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è "–õ—é—Å—Ç—Ä–∞" –∏ —É –Ω–µ—ë –µ—Å—Ç—å –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    if ((category.label === '–õ—é—Å—Ç—Ä–∞' || category.searchName === '–õ—é—Å—Ç—Ä–∞') && 
        category.subcategories && 
        category.subcategories.length > 0) {
      
      // –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—É—é –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é
      const firstSubcategory = category.subcategories[0];
      
      console.log(`–í—ã–±—Ä–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è ${category.label}. –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é:`, firstSubcategory.label);
      
      // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –ø–µ—Ä–≤—É—é –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é, —Å–æ—Ö—Ä–∞–Ω—è—è –≤—ã–±—Ä–∞–Ω–Ω—ã–π –±—Ä–µ–Ω–¥
      router.push({
        pathname: router.pathname,
        query: { 
          ...router.query, 
          category: getCategorySlug(firstSubcategory.searchName || firstSubcategory.label),
          subcategory: firstSubcategory.label,
          // –°–æ—Ö—Ä–∞–Ω—è–µ–º source (–±—Ä–µ–Ω–¥), –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
          source: selectedBrand && selectedBrand.name !== '–í—Å–µ —Ç–æ–≤–∞—Ä—ã' ? getBrandSlug(selectedBrand.name) : undefined,
          page: '1'
        },
      }, undefined, { shallow: true });
    } else {
      // –û–±—ã—á–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ –¥–ª—è –¥—Ä—É–≥–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
      if (!selectedCategory || selectedCategory.label !== category.label) {
        setSelectedCategory(category);
        setCurrentPage(1);
        
        router.push({
          pathname: router.pathname,
          query: { 
            ...router.query, 
            category: getCategorySlug(category.searchName || category.label),
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º source (–±—Ä–µ–Ω–¥), –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
            source: selectedBrand && selectedBrand.name !== '–í—Å–µ —Ç–æ–≤–∞—Ä—ã' ? getBrandSlug(selectedBrand.name) : undefined,
            page: '1',
            // –£–¥–∞–ª—è–µ–º subcategory, –µ—Å–ª–∏ –µ—Å—Ç—å
            subcategory: undefined
          },
        }, undefined, { shallow: true });
      }
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤
  const fetchProducts = async (sourceName: string, page: number = 1) => {
    // –û—Ç–º–µ–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∑–∞–ø—Ä–æ—Å, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
    if (fetchAbortController.current) {
      fetchAbortController.current.abort();
    }
    
    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π AbortController –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
    fetchAbortController.current = new AbortController();
    
    console.log('fetchProducts –∑–∞–ø—É—â–µ–Ω —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏:', { 
      sourceName, 
      page, 
      category: selectedCategory?.label || '–Ω–µ –≤—ã–±—Ä–∞–Ω–∞',
      searchName: selectedCategory?.searchName || '–Ω–µ —É–∫–∞–∑–∞–Ω–æ',
      brandFilter: sourceName ? true : false
    });
    
    setIsLoading(true);
    try {
      // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
      const params: Record<string, any> = {};
      
      // –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é, –∏—Å–ø–æ–ª—å–∑—É—è –ø–∞—Ä–∞–º–µ—Ç—Ä name –¥–ª—è API
      if (selectedCategory && selectedCategory.label !== '–í—Å–µ —Ç–æ–≤–∞—Ä—ã') {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ aliases –∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Ö –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –±–æ–ª–µ–µ –ø–æ–ª–Ω–æ–≥–æ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
        if (selectedCategory.aliases && selectedCategory.aliases.length > 0) {
          // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç –∏–∑ aliases –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—Ä–æ—Å
          params.name = selectedCategory.searchName || selectedCategory.label;
          
          // –î–æ–±–∞–≤–ª—è–µ–º aliases –∫–∞–∫ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
          params.aliases = selectedCategory.aliases;
        } else {
          params.name = selectedCategory.searchName || selectedCategory.label;
        }
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º URL-–ø–∞—Ä–∞–º–µ—Ç—Ä—ã, —á—Ç–æ–±—ã –ø—Ä–∏–æ—Ä–∏—Ç–µ–∑–∏—Ä–æ–≤–∞—Ç—å –∏—Ö –Ω–∞–¥ —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º
      const categoryFromURL = router.query.category;
      if (categoryFromURL && typeof categoryFromURL === 'string' 
          && categoryFromURL.toLowerCase() !== '–≤—Å–µ —Ç–æ–≤–∞—Ä—ã'
          && categoryFromURL.toLowerCase() !== '–≤—Å–µ-—Ç–æ–≤–∞—Ä—ã'
          && categoryFromURL.toLowerCase() !== 'all products') {
        // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç —É –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –∏–∑ URL
        const decodedCategory = decodeURIComponent(categoryFromURL);
        
        // –ò—â–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø–æ URL-–ø–∞—Ä–∞–º–µ—Ç—Ä—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è aliases
        const categoryFromDB = findCategoryByName(decodedCategory);
        if (categoryFromDB && categoryFromDB.aliases && categoryFromDB.aliases.length > 0) {
          params.name = categoryFromDB.searchName || categoryFromDB.label;
          params.aliases = categoryFromDB.aliases;
        } else {
          params.name = decodedCategory;
        }
      }
      
      // –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä –∏—Å—Ç–æ—á–Ω–∏–∫–∞ (–±—Ä–µ–Ω–¥–∞), –µ—Å–ª–∏ –æ–Ω —É–∫–∞–∑–∞–Ω
      if (sourceName) {
        params.source = sourceName;
      }
      
      // –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
      if (selectedColor) params.color = selectedColor;
      if (selectedMaterial) params.material = selectedMaterial;
      if (minPrice !== 10) params.minPrice = minPrice;
      if (maxPrice !== 1000000) params.maxPrice = maxPrice;
      if (searchQuery) params.search = searchQuery;
      
      // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
      if (sortOrder) {
        if (sortOrder === 'asc') {
          params.sortBy = 'price';
          params.sortOrder = 'asc';
        } else if (sortOrder === 'desc') {
          params.sortBy = 'price';
          params.sortOrder = 'desc';
        } else if (sortOrder === 'popularity') {
          params.sortBy = 'popularity';
          params.sortOrder = 'desc';
        } else if (sortOrder === 'newest') {
          params.sortBy = 'date';
          params.sortOrder = 'desc';
        }
      } else {
        // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É –ø–æ —Ü–µ–Ω–µ –ø–æ —É–±—ã–≤–∞–Ω–∏—é
        params.sortBy = 'price';
        params.sortOrder = 'desc';
      }
      
              // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—à—É –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤
        const result = await fetchProductsForPageStandalone(
          sourceName, 
          page, 
          limit, 
          params,
          fetchAbortController.current.signal
        );
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
      setProducts(result.products);
      setTotalPages(result.totalPages);
      setTotalProducts(result.totalProducts);
      
      // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –∏–∑ –≤—Å–µ—Ö –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
      extractFiltersFromProducts(result.products);
    } catch (error) {
      if (!axios.isCancel(error)) {
        console.error('Error fetching products:', error);
        setProducts([]);
        setTotalPages(1);
        setTotalProducts(0);
      }
    } finally {
      setIsLoading(false);
    }
  };

  // –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –∏–∑ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
  const extractFiltersFromProducts = (products: ProductI[]) => {
    const colors = new Set<string>();
    const materials = new Set<string>();
    const features = new Set<string>();
    const styles = new Set<string>();
    const places = new Set<string>();

    products.forEach(product => {
      // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ü–≤–µ—Ç–∞
      if (product.color) {
        colors.add(String(product.color));
      }
      
      // –ò–∑–≤–ª–µ–∫–∞–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª—ã
      if (product.material) {
        materials.add(String(product.material));
      }
      
      // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥—Ä—É–≥–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
    });

    setExtractedFilters({
      colors: Array.from(colors),
      materials: Array.from(materials),
      features: Array.from(features),
      styles: Array.from(styles),
      places: Array.from(places)
    });
  };

  // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–æ–±–∏–ª—å–Ω–æ–≥–æ —Ñ–∏–ª—å—Ç—Ä–∞
  const toggleMobileFilter = () => {
    setIsMobileFilterOpen(!isMobileFilterOpen);
  };
  


  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
  const findRelatedCategories = (currentCategory: Category): Category[] => {
    // –°–ª–æ–≤–∞—Ä—å —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Ç–µ—Ä–º–∏–Ω–æ–≤ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    const relatedTerms: Record<string, string[]> = {
      '–ª—é—Å—Ç—Ä–∞': ['–ø–æ–¥–≤–µ—Å', '—Å–≤–µ—Ç–∏–ª—å–Ω–∏–∫ –ø–æ—Ç–æ–ª–æ—á–Ω—ã–π', '—Å–≤–µ—Ç', '–ª–∞–º–ø–∞', '—Ç–æ—Ä—à–µ—Ä', '–±—Ä–∞', '—Å–ø–æ—Ç—ã', '–ø–æ–¥—Å–≤–µ—Ç–∫–∞'],
      '—Å–≤–µ—Ç–∏–ª—å–Ω–∏–∫': ['–ª—é—Å—Ç—Ä–∞', '–ø–æ–¥–≤–µ—Å', '–±—Ä–∞', '–ª–∞–º–ø–∞', '—Ç–æ—Ä—à–µ—Ä', '–Ω–æ—á–Ω–∏–∫', '—Å–ø–æ—Ç—ã', '–ø–æ–¥—Å–≤–µ—Ç–∫–∞'],
      '–±—Ä–∞': ['–Ω–∞—Å—Ç–µ–Ω–Ω—ã–π —Å–≤–µ—Ç–∏–ª—å–Ω–∏–∫', '–ª—é—Å—Ç—Ä', '—Å–≤–µ—Ç', '–ª–∞–º–ø–∞', '–ø–æ–¥—Å–≤–µ—Ç–∫–∞', '—Å–ø–æ—Ç—ã'],
      '–ª–∞–º–ø–∞': ['—Å–≤–µ—Ç–∏–ª—å–Ω–∏–∫', '–ª—é—Å—Ç—Ä', '—Ç–æ—Ä—à–µ—Ä', '–±—Ä–∞', '–Ω–æ—á–Ω–∏–∫', '–Ω–∞—Å—Ç–æ–ª—å–Ω–∞—è'],
      '—Ç–æ—Ä—à–µ—Ä': ['–Ω–∞–ø–æ–ª—å–Ω—ã–π —Å–≤–µ—Ç–∏–ª—å–Ω–∏–∫', '–ª–∞–º–ø–∞', '—Å–≤–µ—Ç', '–ª—é—Å—Ç—Ä', '–Ω–∞—Å—Ç–æ–ª—å–Ω–∞—è'],
      '–ø–æ–¥–≤–µ—Å': ['–ª—é—Å—Ç—Ä', '—Å–≤–µ—Ç–∏–ª—å–Ω–∏–∫', '—Å–≤–µ—Ç', '–ø–æ–¥–≤–µ—Å–Ω–æ–π'],
      '—Å–ø–æ—Ç': ['—Ç–æ—á–µ—á–Ω—ã–π —Å–≤–µ—Ç–∏–ª—å–Ω–∏–∫', '—Å–≤–µ—Ç', '–±—Ä–∞', '–ø–æ–¥—Å–≤–µ—Ç–∫–∞', '–≤—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã–π'],
      '–Ω–æ—á–Ω–∏–∫': ['—Å–≤–µ—Ç–∏–ª—å–Ω–∏–∫', '–ª–∞–º–ø–∞', '—Å–≤–µ—Ç', '–¥–µ—Ç—Å–∫–∏–π', '–Ω–∞—Å—Ç–æ–ª—å–Ω–∞—è'],
      '–Ω–∞—Å—Ç–æ–ª—å–Ω': ['–ª–∞–º–ø–∞', '—Å–≤–µ—Ç–∏–ª—å–Ω–∏–∫', '–Ω–æ—á–Ω–∏–∫', '—Ä–∞–±–æ—á–∏–π'],
      '–ø–æ–¥—Å–≤–µ—Ç–∫–∞': ['—Å–≤–µ—Ç–æ–¥–∏–æ–¥–Ω–∞—è', '–ª–µ–Ω—Ç–∞', '–ø—Ä–æ—Ñ–∏–ª—å', '—Å–≤–µ—Ç', '—Å–ø–æ—Ç—ã'],
    };
    
    // –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –ø–æ–∫–∞–∑–∞, –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã—Ö
    const popularCategories = ['–õ—é—Å—Ç—Ä—ã', '–°–≤–µ—Ç–∏–ª—å–Ω–∏–∫–∏', '–ë—Ä–∞', '–¢–æ—Ä—à–µ—Ä—ã', '–õ–∞–º–ø—ã'];
    
    if (currentCategory.label === '–í—Å–µ —Ç–æ–≤–∞—Ä—ã' || !selectedBrand) {
      return [];
    }
    
    const relatedCategories: Category[] = [];
    const categoryName = currentCategory.label.toLowerCase();
    
    // –ò—â–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –≤ —Ç–µ–∫—É—â–µ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å —Å–≤—è–∑–∞–Ω—ã —Å –¥—Ä—É–≥–∏–º–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
    const matchingTerms: string[] = [];
    
    Object.keys(relatedTerms).forEach(term => {
      if (categoryName.includes(term)) {
        matchingTerms.push(term);
      }
    });
    
    // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞, –ø—Ä–æ–±—É–µ–º —Ä–∞–∑–±–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–∞ —Å–ª–æ–≤–∞
    // –∏ –∏—Å–∫–∞—Ç—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–ª–æ–≤–∞
    if (matchingTerms.length === 0) {
      const words = categoryName.split(/\s+/);
      words.forEach(word => {
        Object.keys(relatedTerms).forEach(term => {
          if (word.includes(term) || term.includes(word)) {
            matchingTerms.push(term);
          }
        });
      });
    }
    
    // –°–æ–±–∏—Ä–∞–µ–º –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Ç–µ—Ä–º–∏–Ω—ã
    const potentiallyRelatedTerms: string[] = [];
    
    matchingTerms.forEach(term => {
      if (relatedTerms[term]) {
        relatedTerms[term].forEach(relatedTerm => {
          if (!potentiallyRelatedTerms.includes(relatedTerm)) {
            potentiallyRelatedTerms.push(relatedTerm);
          }
        });
      }
    });
    
    // –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –±—Ä–µ–Ω–¥–∞ –∏ –Ω–∞—Ö–æ–¥–∏–º —Ç–µ, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å —Å–≤—è–∑–∞–Ω—ã
    selectedBrand.categories.forEach(category => {
      // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ–∫—É—â—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏ "–í—Å–µ —Ç–æ–≤–∞—Ä—ã"
      if (category.label === currentCategory.label || category.label === '–í—Å–µ —Ç–æ–≤–∞—Ä—ã') {
        return;
      }
      
      const catName = category.label.toLowerCase();
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Ç–µ—Ä–º–∏–Ω—ã
      const isRelated = potentiallyRelatedTerms.some(term => {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∫ —Ç–æ—á–Ω–æ–µ –≤—Ö–æ–∂–¥–µ–Ω–∏–µ, —Ç–∞–∫ –∏ –Ω–∞–ª–∏—á–∏–µ –∫–æ—Ä–Ω–µ–π —Å–ª–æ–≤
        return catName.includes(term) || 
               term.includes(catName) || 
               catName.split(/\s+/).some(word => term.includes(word) || word.includes(term));
      });
      
      if (isRelated) {
        relatedCategories.push(category);
      }
    });
    
    // –ï—Å–ª–∏ –Ω–∞—à–ª–∏ —Å–ª–∏—à–∫–æ–º –º–∞–ª–æ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π, –¥–æ–±–∞–≤–ª—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö
    if (relatedCategories.length < 3) {
      selectedBrand.categories.forEach(category => {
        if (category.label === currentCategory.label || category.label === '–í—Å–µ —Ç–æ–≤–∞—Ä—ã' ||
            relatedCategories.some(c => c.label === category.label)) {
          return;
        }
        
        const isPopular = popularCategories.some(popular => 
          category.label.toLowerCase().includes(popular.toLowerCase())
        );
        
        if (isPopular && relatedCategories.length < 5) {
          relatedCategories.push(category);
        }
      });
    }
    
    // –ï—Å–ª–∏ –≤—Å–µ –µ—â–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π, –¥–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    if (relatedCategories.length < 3) {
      const availableCategories = selectedBrand.categories.filter(category => 
        category.label !== currentCategory.label && 
        category.label !== '–í—Å–µ —Ç–æ–≤–∞—Ä—ã' && 
        !relatedCategories.some(c => c.label === category.label)
      );
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–±–∏–ª—å–Ω—É—é —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É –≤–º–µ—Å—Ç–æ —Å–ª—É—á–∞–π–Ω–æ–π
      const sortedCategories = [...availableCategories].sort((a, b) => 
        a.label.localeCompare(b.label)
      );
      
      // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
      for (const category of sortedCategories) {
        if (relatedCategories.length >= 5) break;
        relatedCategories.push(category);
      }
    }
    
    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    return relatedCategories.slice(0, 5);
  };

  // –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
  const RelatedCategories = () => {
    let relatedCategories: Category[] = [];
    let shouldRender = false;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞
    if (selectedCategory && selectedCategory.label !== '–í—Å–µ —Ç–æ–≤–∞—Ä—ã' && selectedBrand) {
      // –ù–∞–π–¥–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—É—â–µ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
      relatedCategories = findRelatedCategories(selectedCategory);
      
      // –ï—Å–ª–∏ –µ—Å—Ç—å —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –±–ª–æ–∫
      shouldRender = relatedCategories.length > 0;
    }
    
    // –í–º–µ—Å—Ç–æ —Ä–∞–Ω–Ω–µ–≥–æ –≤–æ–∑–≤—Ä–∞—Ç–∞ null, —Ä–µ–Ω–¥–µ—Ä–∏–º –ø—É—Å—Ç–æ–π —Ñ—Ä–∞–≥–º–µ–Ω—Ç, –µ—Å–ª–∏ –Ω–µ –Ω—É–∂–Ω–æ –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å
    if (!shouldRender) {
      return <></>; // –ü—É—Å—Ç–æ–π —Ñ—Ä–∞–≥–º–µ–Ω—Ç –≤–º–µ—Å—Ç–æ null
    }
    
    return (
      <div className="mb-8">
        <h2 className="text-xl font-semibold mb-4">–ü–æ—Ö–æ–∂–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏</h2>
        <div className="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-5 gap-4">
          {relatedCategories.map((category, index) => (
            <div 
              key={`related-${index}`}
              onClick={() => handleCategoryClickWithBrandContext(category)}
              className="bg-white border border-gray-100 rounded-lg p-3 shadow-sm hover:shadow-md transition-shadow cursor-pointer text-center"
            >
              <div className="text-sm font-medium">{category.label}</div>
            </div>
          ))}
        </div>
      </div>
    );
  };
  
  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞–∫–∫–æ—Ä–¥–µ–æ–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  const toggleCategoryAccordion = (categoryId: string) => {
    setProductCategoriesState(prev => 
      prev.map(cat => 
        cat.id === categoryId ? { ...cat, isOpen: !cat.isOpen } : cat
      )
    );
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
  const renderCategories = () => {
    // –í—Å–µ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å –∞–∫–∫–æ—Ä–¥–µ–æ–Ω–æ–º, –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –±—Ä–µ–Ω–¥–∞
    return (
      <div>
        <div className="space-y-1 pl-2 text-sm">
          {productCategoriesState.map((category, index) => {
            if (category.label === '–í—Å–µ —Ç–æ–≤–∞—Ä—ã') return null;
            
            const hasSubcategories = category.subcategories && category.subcategories.length > 0;
            
            return (
              <div key={`${category.label}-${index}`} className="mb-1">
                <div 
                  className={`flex items-center justify-between px-2 py-1.5 rounded transition-colors duration-200 ${
                    (selectedCategory?.label === category.label || 
                    selectedCategory?.searchName === category.searchName) && 
                    !hasSubcategories
                      ? 'font-bold text-black bg-gray-100' 
                      : 'text-gray-600 hover:text-black hover:bg-gray-50 cursor-pointer'
                  }`}
                  onClick={() => hasSubcategories 
                    ? toggleCategoryAccordion(category.id) 
                    : handleCategoryChange(category)
                  }
                >
                  <span>{category.label}</span>
                  {hasSubcategories && (
                    <span className="transform transition-transform duration-200 text-gray-400">
                      {category.isOpen ? (
                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" viewBox="0 0 16 16">
                          <path fillRule="evenodd" d="M7.646 4.646a.5.5 0 0 1 .708 0l6 6a.5.5 0 0 1-.708.708L8 5.707l-5.646 5.647a.5.5 0 0 1-.708-.708l6-6z"/>
                        </svg>
                      ) : (
                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" viewBox="0 0 16 16">
                          <path fillRule="evenodd" d="M1.646 4.646a.5.5 0 0 1 .708 0L8 10.293l5.646-5.647a.5.5 0 0 1 .708.708l-6 6a.5.5 0 0 1-.708 0l-6-6a.5.5 0 0 1 0-.708z"/>
                        </svg>
                      )}
                    </span>
                  )}
                </div>
                
                {/* –ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ –∞–∫–∫–æ—Ä–¥–µ–æ–Ω–µ */}
                {hasSubcategories && category.isOpen && (
                  <div className="pl-4 mt-1 space-y-1 border-l-2 border-gray-100 ml-2">
                    {category.subcategories.map((subcat, subIndex) => (
                      <div 
                        key={`${subcat.label}-${subIndex}`}
                        className={`flex items-center px-2 py-1 rounded transition-colors duration-200 ${
                          selectedCategory?.label === subcat.label || 
                          selectedCategory?.searchName === subcat.searchName
                            ? 'font-bold text-black bg-gray-100' 
                            : 'text-gray-600 hover:text-black hover:bg-gray-50 cursor-pointer'
                        }`}
                        onClick={() => handleCategoryChange(subcat)}
                      >
                        {subcat.label}
                      </div>
                    ))}
                  </div>
                )}
              </div>
            );
          })}
        </div>
      </div>
    );
  };

  const handleBrandChange = (brand: Brand) => {
    setSelectedBrand(brand);
    
    // –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ "–í—Å–µ —Ç–æ–≤–∞—Ä—ã" –±—Ä–µ–Ω–¥
    if (brand.name !== '–í—Å–µ —Ç–æ–≤–∞—Ä—ã') {
      // –ï—Å–ª–∏ —É–∂–µ –≤—ã–±—Ä–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è, –ø—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –æ–Ω–∞ –≤ –Ω–æ–≤–æ–º –±—Ä–µ–Ω–¥–µ
      if (selectedCategory && selectedCategory.label !== '–í—Å–µ —Ç–æ–≤–∞—Ä—ã') {
        // –ò—â–µ–º –∞–Ω–∞–ª–æ–≥–∏—á–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤ –Ω–æ–≤–æ–º –±—Ä–µ–Ω–¥–µ
        const matchingCategory = brand.categories.find(cat => 
          cat.label === selectedCategory.label || 
          cat.searchName === selectedCategory.searchName ||
          (cat.aliases && cat.aliases.includes(selectedCategory.label)) ||
          (selectedCategory.aliases && selectedCategory.aliases.some(alias => cat.label.includes(alias)))
        );
        
        if (matchingCategory) {
          // –ï—Å–ª–∏ –Ω–∞—à–ª–∏ –ø–æ–¥—Ö–æ–¥—è—â—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤ –Ω–æ–≤–æ–º –±—Ä–µ–Ω–¥–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ—ë
          setSelectedCategory(matchingCategory);
          
          router.push({
            pathname: router.pathname,
            query: {
              ...router.query,
              source: getBrandSlug(brand.name),
              category: getCategorySlug(matchingCategory.searchName || matchingCategory.label),
              page: 1
            },
          }, undefined, { shallow: true });
          
          fetchProducts(brand.name, 1);
          return;
        }
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "–í—Å–µ —Ç–æ–≤–∞—Ä—ã" –≤ —Å–ø–∏—Å–∫–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –±—Ä–µ–Ω–¥–∞
      const allProductsCategory = brand.categories.find(cat => cat.label === '–í—Å–µ —Ç–æ–≤–∞—Ä—ã');
      
      // –ï—Å–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è "–í—Å–µ —Ç–æ–≤–∞—Ä—ã" —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –≤—ã–±–∏—Ä–∞–µ–º –µ—ë
      if (allProductsCategory) {
        setSelectedCategory(allProductsCategory);
        
        router.push({
          pathname: router.pathname,
          query: {
            ...router.query,
            source: getBrandSlug(brand.name),
            category: getCategorySlug(allProductsCategory.searchName || allProductsCategory.label),
            page: 1
          },
        }, undefined, { shallow: true });
        
        fetchProducts(brand.name, 1);
      } 
      // –ï—Å–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "–í—Å–µ —Ç–æ–≤–∞—Ä—ã" –Ω–µ—Ç, –Ω–æ –µ—Å—Ç—å –¥—Ä—É–≥–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
      else if (brand.categories.length > 0) {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—É—é –¥–æ—Å—Ç—É–ø–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        const firstCategory = brand.categories[0];
        setSelectedCategory(firstCategory);
        
        router.push({
          pathname: router.pathname,
          query: {
            ...router.query,
            source: getBrandSlug(brand.name),
            category: getCategorySlug(firstCategory.searchName || firstCategory.label),
            page: 1
          },
        }, undefined, { shallow: true });
        
        fetchProducts(brand.name, 1);
      }
      // –ï—Å–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –≤–æ–æ–±—â–µ –Ω–µ—Ç, –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –±—Ä–µ–Ω–¥ –±–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
      else {
        setSelectedCategory(null);
        
        router.push({
          pathname: router.pathname,
          query: {
            ...router.query,
            source: getBrandSlug(brand.name),
            category: undefined,
            page: 1
          },
        }, undefined, { shallow: true });
        
        fetchProducts(brand.name, 1);
      }
    } else {
      // –î–ª—è "–í—Å–µ —Ç–æ–≤–∞—Ä—ã" —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
      setSelectedCategory({ label: '–í—Å–µ —Ç–æ–≤–∞—Ä—ã', searchName: '–í—Å–µ —Ç–æ–≤–∞—Ä—ã' });
      
      router.push({
        pathname: router.pathname,
        query: {
          ...router.query,
          source: undefined,
          category: undefined,
          page: 1
        },
      }, undefined, { shallow: true });
      
      fetchProducts('', 1);
    }
  };
  
  const handleColorChange = (color: string | null) => {
    // –ï—Å–ª–∏ —Ñ–∏–ª—å—Ç—Ä —É–∂–µ –∞–∫—Ç–∏–≤–µ–Ω, —Å–Ω–∏–º–∞–µ–º –µ–≥–æ
    if (selectedColor === color) {
      setSelectedColor(null);
      
      const { color, ...restQuery } = router.query;
      router.push({
        pathname: router.pathname,
        query: { ...restQuery, page: 1 },
      }, undefined, { shallow: true });
          } else {
      setSelectedColor(color);
      
      router.push({
        pathname: router.pathname,
        query: { ...router.query, color, page: 1 },
      }, undefined, { shallow: true });
    }
    
    setCurrentPage(1);
    const sourceName = source || '';
    fetchProducts(sourceName, 1);
  };

  const handleMaterialChange = (material: string | null) => {
    if (selectedMaterial === material) {
      setSelectedMaterial(null);
      
      const { material, ...restQuery } = router.query;
      router.push({
        pathname: router.pathname,
        query: { ...restQuery, page: 1 },
      }, undefined, { shallow: true });
        } else {
      setSelectedMaterial(material);
      
      router.push({
        pathname: router.pathname,
        query: { ...router.query, material, page: 1 },
      }, undefined, { shallow: true });
    }
    
    setCurrentPage(1);
    const sourceName = source || '';
    fetchProducts(sourceName, 1);
  };

  const handlePriceRangeChange = (min: number, max: number) => {
    setMinPrice(min);
    setMaxPrice(max);
    
    router.push({
      pathname: router.pathname,
      query: { ...router.query, minPrice: min.toString(), maxPrice: max.toString(), page: 1 },
    }, undefined, { shallow: true });
    
    setCurrentPage(1);
    const sourceName = source || '';
    fetchProducts(sourceName, 1);
  };

  const handleSortOrderChange = (order: 'asc' | 'desc' | 'popularity' | 'newest' | 'random' | null) => {
    setSortOrder(order);
    
    if (order) {
      router.push({
        pathname: router.pathname,
        query: { ...router.query, sort: order, page: 1 },
      }, undefined, { shallow: true });
    } else {
      const { sort, ...restQuery } = router.query;
      router.push({
        pathname: router.pathname,
        query: { ...restQuery, page: 1 },
      }, undefined, { shallow: true });
    }
    
    setCurrentPage(1);
    const sourceName = source || '';
    fetchProducts(sourceName, 1);
  };
  
  const handleResetFilters = () => {
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π –±—Ä–µ–Ω–¥, –µ—Å–ª–∏ –æ–Ω –≤—ã–±—Ä–∞–Ω
    const currentBrand = selectedBrand && selectedBrand.name !== '–í—Å–µ —Ç–æ–≤–∞—Ä—ã' ? selectedBrand : null;
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é "–í—Å–µ —Ç–æ–≤–∞—Ä—ã", –Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –±—Ä–µ–Ω–¥
    setSelectedCategory({ label: '–í—Å–µ —Ç–æ–≤–∞—Ä—ã', searchName: '–í—Å–µ —Ç–æ–≤–∞—Ä—ã' });
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
    setMinPrice(10);
    setMaxPrice(1000000);
    setSelectedColor(null);
    setSelectedMaterial(null);
    setSelectedRating(null);
    setSortOrder(null);
    setSearchQuery('');
    setCurrentPage(1);
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ URL, –Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º source, –µ—Å–ª–∏ —Ç–µ–∫—É—â–∏–π –±—Ä–µ–Ω–¥ –Ω–µ null
    const sourceName = currentBrand ? currentBrand.name : '';
    router.push({
      pathname: router.pathname,
      query: currentBrand ? { source: sourceName } : {},
    }, undefined, { shallow: true });
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤ —Å —É—á–µ—Ç–æ–º –±—Ä–µ–Ω–¥–∞
    fetchProducts(sourceName, 1);
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–º–µ–Ω—ã —Å—Ç—Ä–∞–Ω–∏—Ü—ã
  const handlePageChange = (page: number) => {
    if (page < 1 || page > totalPages) return;
    
    setCurrentPage(page);
    
    router.push({
      pathname: router.pathname,
      query: { ...router.query, page },
    }, undefined, { shallow: true });
    
    window.scrollTo({
      top: 0,
      behavior: 'smooth'
    });
    
    const sourceName = router.query.source || source || '';
    fetchProducts(sourceName as string, page);
  };

  // --- –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è SEO ---
  const sourceTitle = selectedBrand
    ? `–¢–æ–≤–∞—Ä—ã –±—Ä–µ–Ω–¥–∞ ${selectedBrand.name}${selectedCategory?.label !== '–í—Å–µ —Ç–æ–≤–∞—Ä—ã' ? ` - ${selectedCategory?.label}` : ''}`
    : '–ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤';

  const seoKeywords = [
    sourceTitle,
    selectedBrand?.name,
    selectedCategory?.label,
    '–∫—É–ø–∏—Ç—å',
    '–∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω',
    '—Å–≤–µ—Ç–∏–ª—å–Ω–∏–∫–∏',
    '–ª—é—Å—Ç—Ä—ã',
    // –î–æ–±–∞–≤—å—Ç–µ –¥—Ä—É–≥–∏–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
  ].filter(Boolean).join(', '); // –£–¥–∞–ª—è–µ–º –ø—É—Å—Ç—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏ –æ–±—ä–µ–¥–∏–Ω—è–µ–º

  // –ó–∞–º–µ–Ω–∏—Ç–µ 'https://yourdomain.com' –Ω–∞ –≤–∞—à —Ä–µ–∞–ª—å–Ω—ã–π –¥–æ–º–µ–Ω
  const canonicalUrl = `https://morelektriki.ru${router.asPath}`;

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ —Å —ç–ª–ª–∏–ø—Å–∏—Å–∞–º–∏
  const renderPagination = () => {
    // –û—Ç–ª–∞–¥–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∞–∂–µ –µ—Å–ª–∏ 1 —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –≤ development —Ä–µ–∂–∏–º–µ
    const shouldShowPagination = totalPages > 1 || (process.env.NODE_ENV === 'development' && products.length > 0);
    
    if (!shouldShowPagination) return null;
    
    const pageNumbers: (number | string)[] = [];
    
    // –í—Å–µ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    pageNumbers.push(1);
    
    let startPage = Math.max(2, currentPage - 1);
    let endPage = Math.min(totalPages - 1, currentPage + 1);
    
    // –†–∞—Å—à–∏—Ä—è–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω –¥–ª—è –º–∞–ª—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü
    if (currentPage <= 3) {
      endPage = Math.min(totalPages - 1, 5);
    }
    
    // –†–∞—Å—à–∏—Ä—è–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω –¥–ª—è –±–æ–ª—å—à–∏—Ö —Å—Ç—Ä–∞–Ω–∏—Ü
    if (currentPage >= totalPages - 2) {
      startPage = Math.max(2, totalPages - 4);
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º —ç–ª–ª–∏–ø—Å–∏—Å –≤ –Ω–∞—á–∞–ª–µ, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    if (startPage > 2) {
      pageNumbers.push('ellipsis-start');
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ
    for (let i = startPage; i <= endPage; i++) {
      pageNumbers.push(i);
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º —ç–ª–ª–∏–ø—Å–∏—Å –≤ –∫–æ–Ω—Ü–µ, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    if (endPage < totalPages - 1) {
      pageNumbers.push('ellipsis-end');
    }
    
    // –í—Å–µ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Å—Ç—Ä–∞–Ω–∏—Ü—É (–µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ –ø–µ—Ä–≤–∞—è)
    if (totalPages > 1) {
      pageNumbers.push(totalPages);
    }
    
    return (
      <div className="flex justify-center items-center mt-8 space-x-2">
        {/* –ö–Ω–æ–ø–∫–∞ "–í –Ω–∞—á–∞–ª–æ" */}
        {currentPage > 1 && (
          <button
            onClick={() => handlePageChange(1)}
            className="px-3 py-2 border rounded-md border-gray-300 hover:bg-gray-50 text-gray-700 transition-colors"
            aria-label="–ü–µ—Ä–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"
          >
            ¬´¬´
          </button>
        )}
        
        {/* –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥" */}
        <button
          onClick={() => handlePageChange(currentPage - 1)}
          disabled={currentPage === 1}
          className={`px-3 py-2 border rounded-md transition-colors ${
            currentPage === 1
              ? 'bg-gray-100 text-gray-400 cursor-not-allowed border-gray-200'
              : 'border-gray-300 hover:bg-gray-50 text-gray-700'
          }`}
          aria-label="–ü—Ä–µ–¥—ã–¥—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"
        >
          ‚Äπ
        </button>
        
        {/* –ù–æ–º–µ—Ä–∞ —Å—Ç—Ä–∞–Ω–∏—Ü */}
        {pageNumbers.map((page, index) => {
          if (page === 'ellipsis-start' || page === 'ellipsis-end') {
            return (
              <span key={`${page}-${index}`} className="px-3 py-2 text-gray-500">
                ...
              </span>
            );
          }
          
          const pageNum = Number(page);
          return (
            <button
              key={`page-${page}-${index}`}
              onClick={() => handlePageChange(pageNum)}
              className={`min-w-[40px] px-3 py-2 border rounded-md transition-colors ${
                currentPage === pageNum
                  ? 'bg-black text-white border-black hover:bg-gray-800'
                  : 'border-gray-300 hover:bg-gray-50 text-gray-700'
              }`}
            >
              {page}
            </button>
          );
        })}
        
        {/* –ö–Ω–æ–ø–∫–∞ "–í–ø–µ—Ä–µ–¥" */}
        <button
          onClick={() => handlePageChange(currentPage + 1)}
          disabled={currentPage === totalPages}
          className={`px-3 py-2 border rounded-md transition-colors ${
            currentPage === totalPages
              ? 'bg-gray-100 text-gray-400 cursor-not-allowed border-gray-200'
              : 'border-gray-300 hover:bg-gray-50 text-gray-700'
          }`}
          aria-label="–°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"
        >
          ‚Ä∫
        </button>
        
        {/* –ö–Ω–æ–ø–∫–∞ "–í –∫–æ–Ω–µ—Ü" */}
        {currentPage < totalPages && (
          <button
            onClick={() => handlePageChange(totalPages)}
            className="px-3 py-2 border rounded-md border-gray-300 hover:bg-gray-50 text-gray-700 transition-colors"
            aria-label="–ü–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"
          >
            ¬ª¬ª
          </button>
        )}
        
        {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ */}
        <div className="ml-4 text-sm text-gray-600">
          –°—Ç—Ä–∞–Ω–∏—Ü–∞ {currentPage} –∏–∑ {totalPages}
        </div>
      </div>
    );
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –∫–æ–ª–ª–µ–∫—Ü–∏—è–º
  const groupProductsByCollection = (products: ProductI[]) => {
    // –ï—Å–ª–∏ –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –∏–ª–∏ –ø—É—Å—Ç—ã, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—ä–µ–∫—Ç —Å –æ–¥–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π "–ü—Ä–æ—á–∏–µ —Ç–æ–≤–∞—Ä—ã"
    if (!products || products.length === 0) {
      return { '–ü—Ä–æ—á–∏–µ —Ç–æ–≤–∞—Ä—ã': [] };
    }
    
    const collectionsTemp: Record<string, ProductI[]> = {};
    
    // –°–æ–∑–¥–∞–µ–º –Ω–∞–±–æ—Ä –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤ –∫–æ–ª–ª–µ–∫—Ü–∏–π
    const knownCollectionPatterns = [
      // –°–≤–µ—Ç–∏–ª—å–Ω–∏–∫–∏ –ø–æ —Ç–∏–ø–∞–º
      '–õ—é—Å—Ç—Ä–∞', '–ë—Ä–∞', '–¢–æ—Ä—à–µ—Ä', '–°–≤–µ—Ç–∏–ª—å–Ω–∏–∫', '–õ–∞–º–ø–∞', '–ü–æ–¥–≤–µ—Å', '–°–ø–æ—Ç', 
      // –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞
      'Maytoni', 'Sonex', 'Denkirs', 'Favourite', 'OdeonLight',
      'Artelamp', 'KinkLight', 'LightStar', 'Lumion', 'Novotech', 'Stluce',
      'ElektroStandard',
      // –î–æ–±–∞–≤–ª—è–µ–º –∏–∑–≤–µ—Å—Ç–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–ª–ª–µ–∫—Ü–∏–π
      'BOLLA', 'YUKA', 'OSCA', 'ZETA', 'TUBO', 'CILINO', 'RAMO', 'RAGNO', 'STREGARO',
      'FAVO', 'EXTRA', 'SIENA', 'PALLA', 'LASSA', 'MERTO', 'PIN', 'MITRA', 'PALE',
      'VAKA', 'MINI', 'COLOR', 'SNOK', 'BASICA', 'MARON', 'AVRA', 'TAN', 'PICO',
      'LINE', 'FLAT', 'SLIM', 'ESTHETIC'
    ];
    
    // –°–æ–∑–¥–∞–µ–º –Ω–∞–±–æ—Ä –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ—Ö–æ–∂–∏—Ö —á–∞—Å—Ç–µ–π –Ω–∞–∑–≤–∞–Ω–∏–π
    const productNameParts: Record<string, number> = {};
    
    // –ü–µ—Ä–≤—ã–π –ø—Ä–æ—Ö–æ–¥ - —Å–æ–±–∏—Ä–∞–µ–º —á–∞—Å—Ç–∏ –∏–º–µ–Ω –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –æ–±—â–∏—Ö —Å–ª–æ–≤ –∏ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
    products.forEach(product => {
      if (typeof product.name === 'string' && product.name.trim()) {
        const productName = product.name.trim();
        
        // 1. –†–∞–∑–±–∏–≤–∞–µ–º –∏–º—è –Ω–∞ —Å–ª–æ–≤–∞ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –≤ –Ω–∞–±–æ—Ä
        const words = productName.split(/\s+/).filter(word => word.length > 3);
        words.forEach(word => {
          productNameParts[word] = (productNameParts[word] || 0) + 1;
        });
        
        // 2. –ò—â–µ–º —Å–ª–æ–≤–∞ –≤ –í–ï–†–•–ù–ï–ú –†–ï–ì–ò–°–¢–†–ï (—á–∞—Å—Ç–æ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–ª–ª–µ–∫—Ü–∏–π)
        const uppercaseWords = productName.match(/\b([A-Z–ê-–Ø]{3,})\b/g);
        if (uppercaseWords) {
          uppercaseWords.forEach(word => {
            // –î–∞–µ–º –±–æ–ª—å—à–∏–π –≤–µ—Å —Å–ª–æ–≤–∞–º –≤ –≤–µ—Ä—Ö–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ (—Å—á–∏—Ç–∞–µ–º –∏—Ö –∑–∞ 2)
            productNameParts[word] = (productNameParts[word] || 0) + 2;
          });
        }
        
        // 3. –ò—â–µ–º —Å–ª–æ–≤–∞ –ø–æ—Å–ª–µ –ø—Ä–µ–¥–ª–æ–≥–æ–≤ "–∫–æ–ª–ª–µ–∫—Ü–∏—è", "—Å–µ—Ä–∏—è", "–º–æ–¥–µ–ª—å" –∏ —Ç.–¥.
        const collectionMarkers = [
          /–∫–æ–ª–ª–µ–∫—Ü–∏—è\s+([A-Za-z–ê-–Ø–∞-—è0-9]+)/i,
          /—Å–µ—Ä–∏—è\s+([A-Za-z–ê-–Ø–∞-—è0-9]+)/i,
          /–º–æ–¥–µ–ª—å\s+([A-Za-z–ê-–Ø–∞-—è0-9]+)/i,
          /collection\s+([A-Za-z–ê-–Ø–∞-—è0-9]+)/i,
          /—Å–µ—Ä–∏–∏\s+([A-Za-z–ê-–Ø–∞-—è0-9]+)/i
        ];
        
        collectionMarkers.forEach(marker => {
          const match = productName.match(marker);
          if (match && match[1]) {
            // –î–∞–µ–º –Ω–∞–∏–±–æ–ª—å—à–∏–π –≤–µ—Å —Å–ª–æ–≤–∞–º –ø–æ—Å–ª–µ –º–∞—Ä–∫–µ—Ä–æ–≤ –∫–æ–ª–ª–µ–∫—Ü–∏–π (—Å—á–∏—Ç–∞–µ–º –∏—Ö –∑–∞ 3)
            productNameParts[match[1]] = (productNameParts[match[1]] || 0) + 3;
          }
        });
      }
    });
    
    // –í—ã–±–∏—Ä–∞–µ–º –Ω–∞–∏–±–æ–ª–µ–µ —á–∞—Å—Ç—ã–µ —Å–ª–æ–≤–∞ –∫–∞–∫ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ (—Å –ø–æ—Ä–æ–≥–æ–º –º–∏–Ω–∏–º—É–º 2 —Ç–æ–≤–∞—Ä–∞)
    const commonNameParts = Object.entries(productNameParts)
      .filter(([_, count]) => count >= 2)
      .sort((a, b) => b[1] - a[1])
      .map(([word]) => word);
    
    // –û–±—ä–µ–¥–∏–Ω—è–µ–º common parts —Å –∏–∑–≤–µ—Å—Ç–Ω—ã–º–∏ –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º–∏, –æ—Ç–¥–∞–≤–∞—è –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç common
    const allCollectionPatterns = [...commonNameParts, ...knownCollectionPatterns];
    
    // –í—Ç–æ—Ä–æ–π –ø—Ä–æ—Ö–æ–¥ - –≥—Ä—É–ø–ø–∏—Ä—É–µ–º –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ–±—Ä–∞–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    products.forEach(product => {
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–ª–µ–∫—Ü–∏—é –ø–æ —Ä–∞–∑–Ω—ã–º –ø–æ–ª—è–º –∏ –∞–ª–≥–æ—Ä–∏—Ç–º–∞–º —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º–∏
      let collectionName = '–ë–µ–∑ –∫–æ–ª–ª–µ–∫—Ü–∏–∏';
      
      // 1. –ò—Å–ø–æ–ª—å–∑—É–µ–º —è–≤–Ω–æ–µ –ø–æ–ª–µ collection, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
      if (product.collection) {
        collectionName = String(product.collection);
      } 
      // 2. –ò—â–µ–º –∫–æ–ª–ª–µ–∫—Ü–∏—é –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞
      else if (typeof product.name === 'string' && product.name.trim()) {
        const productName = product.name.trim();
        
        // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º —è–≤–Ω—ã–µ –º–∞—Ä–∫–µ—Ä—ã –∫–æ–ª–ª–µ–∫—Ü–∏–π
        let foundCollectionMarker = false;
        const collectionMarkers = [
          /–∫–æ–ª–ª–µ–∫—Ü–∏—è\s+([A-Za-z–ê-–Ø–∞-—è0-9]+)/i,
          /—Å–µ—Ä–∏—è\s+([A-Za-z–ê-–Ø–∞-—è0-9]+)/i,
          /–º–æ–¥–µ–ª—å\s+([A-Za-z–ê-–Ø–∞-—è0-9]+)/i,
          /collection\s+([A-Za-z–ê-–Ø–∞-—è0-9]+)/i,
          /—Å–µ—Ä–∏–∏\s+([A-Za-z–ê-–Ø–∞-—è0-9]+)/i
        ];
        
        for (const marker of collectionMarkers) {
          const match = productName.match(marker);
          if (match && match[1]) {
            collectionName = match[1];
            foundCollectionMarker = true;
            break;
          }
        }
        
        // –ï—Å–ª–∏ —è–≤–Ω—ã—Ö –º–∞—Ä–∫–µ—Ä–æ–≤ –Ω–µ—Ç, –∏—â–µ–º —Å–ª–æ–≤–∞ –≤ –í–ï–†–•–ù–ï–ú –†–ï–ì–ò–°–¢–†–ï
        if (!foundCollectionMarker) {
          const uppercaseWords = productName.match(/\b([A-Z–ê-–Ø]{3,})\b/g);
          if (uppercaseWords && uppercaseWords.length > 0) {
            collectionName = uppercaseWords[0];
            foundCollectionMarker = true;
          }
        }
        
        // –ï—Å–ª–∏ –∏ —ç—Ç–æ–≥–æ –Ω–µ—Ç, –∏—â–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è —Å –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º–∏ –∫–æ–ª–ª–µ–∫—Ü–∏–π
        if (!foundCollectionMarker) {
          for (const pattern of allCollectionPatterns) {
            if (productName.includes(pattern)) {
              collectionName = pattern;
              foundCollectionMarker = true;
              break;
            }
          }
        }
        
        // –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à–ª–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤–æ–µ —Å–ª–æ–≤–æ –Ω–∞–∑–≤–∞–Ω–∏—è
        if (!foundCollectionMarker) {
          const nameMatch = productName.match(/([–ê-–Ø–∞-—èA-Za-z0-9]{3,})/);
          if (nameMatch && nameMatch[1]) {
            collectionName = nameMatch[1];
          }
        }
      } 
      // 3. –ò—Å–ø–æ–ª—å–∑—É–µ–º –±—Ä–µ–Ω–¥ —Ç–æ–≤–∞—Ä–∞ –∫–∞–∫ –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤–∞—Ä–∏–∞–Ω—Ç
      else if (product.source && typeof product.source === 'string') {
        collectionName = String(product.source);
      }
      
      // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–æ–ª–ª–µ–∫—Ü–∏—é
      if (!collectionsTemp[collectionName]) {
        collectionsTemp[collectionName] = [];
      }
      collectionsTemp[collectionName].push(product);
    });
    
    // –§–∏–Ω–∞–ª—å–Ω—ã–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    const collections: Record<string, ProductI[]> = {};
    
    // –°–æ–∑–¥–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —Ä–∞–∑—Ä–æ–∑–Ω–µ–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ (–≤—Å–µ–≥–¥–∞ –¥–æ–ª–∂–Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å)
    collections['–ü—Ä–æ—á–∏–µ —Ç–æ–≤–∞—Ä—ã'] = [];
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
    Object.entries(collectionsTemp)
      // –°–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –ª—É—á—à–µ–π –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏
      .sort((a, b) => b[1].length - a[1].length)
      .forEach(([name, items]) => {
        // –ï—Å–ª–∏ –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –±–æ–ª—å—à–µ 1 —Ç–æ–≤–∞—Ä–∞, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ—ë
        if (items.length > 1) {
          collections[name] = items;
        } else {
          // –ò–Ω–∞—á–µ –¥–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä –≤ "–ü—Ä–æ—á–∏–µ —Ç–æ–≤–∞—Ä—ã"
          collections['–ü—Ä–æ—á–∏–µ —Ç–æ–≤–∞—Ä—ã'].push(...items);
        }
      });
    
    // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–∞ –∫–æ–ª–ª–µ–∫—Ü–∏—è, –¥–∞–∂–µ –µ—Å–ª–∏ –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –≤ "–ü—Ä–æ—á–∏–µ —Ç–æ–≤–∞—Ä—ã"
    if (Object.keys(collections).length === 0 || 
       (Object.keys(collections).length === 1 && collections['–ü—Ä–æ—á–∏–µ —Ç–æ–≤–∞—Ä—ã'].length === 0)) {
      return { '–í—Å–µ —Ç–æ–≤–∞—Ä—ã': products };
    }
    
    return collections;
  };

  // –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —à–∏—Ä–∏–Ω—ã —ç–∫—Ä–∞–Ω–∞
  const [isMobile, setIsMobile] = useState<boolean>(false);

  // –≠—Ñ—Ñ–µ–∫—Ç –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –º–æ–±–∏–ª—å–Ω–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
  useEffect(() => {
    const handleResize = () => {
      setIsMobile(window.innerWidth < 768);
    };
    
    // –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    handleResize();
    
    // –î–æ–±–∞–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è resize
    window.addEventListener('resize', handleResize);
    
    // –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
    return () => {
      window.removeEventListener('resize', handleResize);
    };
  }, []);

  // –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –∞–∫–∫–æ—Ä–¥–µ–æ–Ω–∞ –¥–ª—è –±—Ä–µ–Ω–¥–æ–≤
  const BrandsAccordion = () => {
    const [isBrandsOpen, setIsBrandsOpen] = useState(false);

    return (
      <div className="bg-white rounded-lg p-4 mb-4 shadow-sm border border-gray-100">
        <div 
          className="flex items-center justify-between cursor-pointer"
          onClick={() => setIsBrandsOpen(!isBrandsOpen)}
        >
          <span className="font-medium text-sm uppercase">–ë—Ä–µ–Ω–¥—ã</span>
          <span className="transform transition-transform duration-200 text-gray-400">
            {isBrandsOpen ? (
              <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" viewBox="0 0 16 16">
                <path fillRule="evenodd" d="M7.646 4.646a.5.5 0 0 1 .708 0l6 6a.5.5 0 0 1-.708.708L8 5.707l-5.646 5.647a.5.5 0 0 1-.708-.708l6-6z"/>
              </svg>
            ) : (
              <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" viewBox="0 0 16 16">
                <path fillRule="evenodd" d="M1.646 4.646a.5.5 0 0 1 .708 0L8 10.293l5.646-5.647a.5.5 0 0 1 .708.708l-6 6a.5.5 0 0 1-.708 0l-6-6a.5.5 0 0 1 0-.708z"/>
              </svg>
            )}
          </span>
        </div>
        
        {isBrandsOpen && (
          <div className="mt-3 space-y-1.5 max-h-[200px] overflow-y-auto pr-1">
            {brands.map((brand, index) => (
              <div
                key={`brand-${index}`}
                className={`flex items-center px-3 py-2 rounded transition-colors duration-200 ${
                  selectedBrand?.name === brand.name
                    ? 'bg-gray-100 text-black font-medium' 
                    : 'text-gray-700 hover:bg-gray-50 cursor-pointer'
                }`}
                onClick={() => handleBrandChange(brand)}
              >
                <span className="text-sm">{brand.name}</span>
              </div>
            ))}
          </div>
        )}
      </div>
    );
  };

  // –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –±—Ä–µ–Ω–¥–∞ –∏ –µ–≥–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
  const BrandPanel = () => {
    if (!selectedBrand || selectedBrand.name === '–í—Å–µ —Ç–æ–≤–∞—Ä—ã') return null;
    
    return (
      <div className="bg-white rounded-lg p-4 mb-4 shadow-sm border border-gray-100">
        <div className="flex items-center mb-4">
          <div className="flex-1 flex items-center gap-3">
            <div>
              <h2 className="font-semibold text-gray-900">{selectedBrand.name}</h2>
              <p className="text-xs text-gray-500">–û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –¥–∏–ª–µ—Ä</p>
            </div>
          </div>
          {/* –ö–Ω–æ–ø–∫–∞ —Å–±—Ä–æ—Å–∞ –±—Ä–µ–Ω–¥–∞ */}
          <button 
            onClick={() => {
              const globalBrand = brands.find(b => b.name === '–í—Å–µ —Ç–æ–≤–∞—Ä—ã');
              if (globalBrand) handleBrandChange(globalBrand);
            }}
            className="p-1.5 rounded-full hover:bg-gray-100 text-gray-400 hover:text-gray-700 transition-colors"
            title="–°–±—Ä–æ—Å–∏—Ç—å –±—Ä–µ–Ω–¥"
          >
            <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
              <path fillRule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clipRule="evenodd" />
            </svg>
          </button>
        </div>
        
        {/* –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –±—Ä–µ–Ω–¥–∞ —Å –≤–∏–∑—É–∞–ª—å–Ω—ã–º —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ–º */}
        {selectedBrand.categories.length > 0 && (
          <div className="mt-1">
            <div className="text-xs uppercase text-gray-500 font-medium mb-2">–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ {selectedBrand.name}</div>
            <div className="space-y-1.5">
              {selectedBrand.categories
                .filter(category => category.label !== '–í—Å–µ —Ç–æ–≤–∞—Ä—ã')
                .map((category, idx) => (
                  <div
                    key={`brand-cat-${idx}`}
                    onClick={() => {
                      setSelectedCategory(category);
                      router.push({
                        pathname: router.pathname,
                        query: {
                          ...router.query,
                          source: selectedBrand.name === '–í—Å–µ —Ç–æ–≤–∞—Ä—ã' ? undefined : getBrandSlug(selectedBrand.name),
                          category: getCategorySlug(category.searchName || category.label),
                          page: 1
                        },
                      }, undefined, { shallow: true });
                      fetchProducts(selectedBrand.name === '–í—Å–µ —Ç–æ–≤–∞—Ä—ã' ? '' : selectedBrand.name, 1);
                    }}
                    className={`px-3 py-2 rounded-md text-sm cursor-pointer transition-colors ${
                      selectedCategory?.label === category.label
                        ? 'bg-black text-white font-medium'
                        : 'bg-gray-50 text-gray-800 hover:bg-gray-100'
                    }`}
                  >
                    {category.label}
                  </div>
                ))
              }
            </div>
          </div>
        )}
      </div>
    );
  };

  // –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —Å–∫–ª–æ–Ω–µ–Ω–∏—è —Å–ª–æ–≤–∞ "—Ç–æ–≤–∞—Ä"
  const getTotalProductsText = (count: number): string => {
    const lastDigit = count % 10;
    const lastTwoDigits = count % 100;
    
    if (lastTwoDigits >= 11 && lastTwoDigits <= 19) {
      return '—Ç–æ–≤–∞—Ä–æ–≤';
    }
    
    if (lastDigit === 1) {
      return '—Ç–æ–≤–∞—Ä';
    }
    
    if (lastDigit >= 2 && lastDigit <= 4) {
      return '—Ç–æ–≤–∞—Ä–∞';
    }
    
    return '—Ç–æ–≤–∞—Ä–æ–≤';
  };

  // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–ª–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å —É—á–µ—Ç–æ–º –±—Ä–µ–Ω–¥–∞
  const handleCategoryClickWithBrandContext = (category: Category) => {
    // –ï—Å–ª–∏ –µ—Å—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–π –±—Ä–µ–Ω–¥ –∏ —ç—Ç–æ –Ω–µ "–í—Å–µ —Ç–æ–≤–∞—Ä—ã"
    if (selectedBrand && selectedBrand.name !== '–í—Å–µ —Ç–æ–≤–∞—Ä—ã') {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–∞–∫–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –±—Ä–µ–Ω–¥–µ
      const brandCategory = selectedBrand.categories.find(cat => 
        cat.label === category.label || 
        cat.searchName === category.searchName || 
        (cat.aliases && cat.aliases.includes(category.label)) ||
        (category.aliases && category.aliases.some(alias => cat.label.includes(alias)))
      );
      
      if (brandCategory) {
        // –ï—Å–ª–∏ –Ω–∞—à–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤ –±—Ä–µ–Ω–¥–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ—ë (—Å–æ—Ö—Ä–∞–Ω—è—è source –≤ URL)
        handleCategoryChange(brandCategory);
        return;
      }
    }
    
    // –ï—Å–ª–∏ –±—Ä–µ–Ω–¥ –Ω–µ –≤—ã–±—Ä–∞–Ω –∏–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±—Ä–µ–Ω–¥–µ,
    // –∏—â–µ–º —ç—Ç—É –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤ –æ–±—â–µ–º —Å–ø–∏—Å–∫–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    handleCategoryChange(category);
  };

  return (
    <div className="min-h-screen flex flex-col bg-white">
      <Head>
        {/* –†–µ–Ω–¥–µ—Ä–∏–º preload —Ç–µ–≥–∏ –¥–ª—è LCP –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–æ–π */}
        {lcpImageUrls.map((url) => (
          <link
            key={url}
            rel="preload"
            href={url}
            as="image"
          />
        ))}
        {/* SEO –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –∏ –¥—Ä—É–≥–∏–µ —Ç–µ–≥–∏ <head> */}
        <SEO
          title={sourceTitle}
          description={`–ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤ ${selectedBrand?.name || ''} ${selectedCategory?.label || ''}. –ë–æ–ª—å—à–æ–π –≤—ã–±–æ—Ä —Å–≤–µ—Ç–∏–ª—å–Ω–∏–∫–æ–≤ –∏ –ª—é—Å—Ç—Ä.`}
          keywords={seoKeywords}
          url={canonicalUrl}
        />
      </Head>
      <Header />
      <main className="flex-grow container mx-auto px-2 sm:px-4 lg:px-8 pt-4 sm:pt-6 pb-12 mt-20 max-w-full overflow-hidden">
        <div className="max-w-7xl p-3  mx-auto">
          {/* –•–ª–µ–±–Ω—ã–µ –∫—Ä–æ—à–∫–∏ - —Å–∫—Ä—ã–≤–∞–µ–º –Ω–∞ —Å–∞–º—ã—Ö –º–∞–ª–µ–Ω—å–∫–∏—Ö —ç–∫—Ä–∞–Ω–∞—Ö */}
          <div className="hidden sm:flex items-center text-sm  text-gray-500 mb-4">
            <Link href="/" className="hover:text-gray-900 p-3  transition-colors">–ù–∞–∑–∞–¥</Link>
            <span className="text-gray-300">‚Ä¢</span>
            <Link href="/" className="hover:text-gray-900 p-3  transition-colors">–ì–ª–∞–≤–Ω–∞—è</Link>
            <span className="text-gray-300">‚Ä¢</span>
            <Link href="/catalog" className="hover:text-gray-900 p-3  transition-colors">–ö–∞—Ç–∞–ª–æ–≥</Link>
            <span className="text-gray-300">‚Ä¢</span>
            <span className="text-gray-900 p-3  font-medium">–ö–ê–¢–ê–õ–û–ì –°–í–ï–¢–ê</span>
          </div>
          
          {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª–µ–º —Ä–µ–∂–∏–º–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ */}
          <div className="flex flex-col sm:flex-row sm:justify-between sm:items-center mb-6 gap-3">
            <h1 className="text-4xl md:text-5xl font-bold text-center w-full">
            –ö–ê–¢–ê–õ–û–ì –°–í–ï–¢–ê
            </h1>
          </div>
          
          {/* –ì–ª–∞–≤–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ */}
          {isClient && (
            <div className="mb-8 bg-white rounded-lg p-6 shadow-sm border border-gray-100">
              <div className="flex flex-wrap gap-3 justify-center items-center">
                {/* –õ–Æ–°–¢–†–´ */}
                <div className="relative group">
                  <button className="px-4 py-2 bg-gray-50 hover:bg-gray-100 rounded-full text-sm font-medium text-gray-700 hover:text-black transition-colors">
                    –õ–Æ–°–¢–†–´
                  </button>
                  <div className="absolute top-full left-0 mt-2 bg-white border border-gray-200 rounded-lg shadow-lg opacity-0 invisible group-hover:opacity-100 group-hover:visible transition-all duration-200 z-50 min-w-48">
                    <div className="p-2">
                      <button 
                        onClick={() => handleCategoryClickWithBrandContext({ label: '–õ—é—Å—Ç—Ä–∞ –ø–æ–¥–≤–µ—Å–Ω–∞—è', searchName: '–õ—é—Å—Ç—Ä–∞ –ø–æ–¥–≤–µ—Å–Ω–∞—è' })}
                        className="block w-full text-left px-3 py-2 text-sm text-gray-700 hover:bg-gray-50 rounded-md"
                      >
                        –õ—é—Å—Ç—Ä–∞ –ø–æ–¥–≤–µ—Å–Ω–∞—è
                      </button>
                      <button 
                        onClick={() => handleCategoryClickWithBrandContext({ label: '–õ—é—Å—Ç—Ä–∞ –ø–æ—Ç–æ–ª–æ—á–Ω–∞—è', searchName: '–õ—é—Å—Ç—Ä–∞ –ø–æ—Ç–æ–ª–æ—á–Ω–∞—è' })}
                        className="block w-full text-left px-3 py-2 text-sm text-gray-700 hover:bg-gray-50 rounded-md"
                      >
                        –õ—é—Å—Ç—Ä–∞ –ø–æ—Ç–æ–ª–æ—á–Ω–∞—è
                      </button>
                      <button 
                        onClick={() => handleCategoryClickWithBrandContext({ label: '–õ—é—Å—Ç—Ä–∞ –∫–∞—Å–∫–∞–¥–Ω–∞—è', searchName: '–õ—é—Å—Ç—Ä–∞ –∫–∞—Å–∫–∞–¥–Ω–∞—è' })}
                        className="block w-full text-left px-3 py-2 text-sm text-gray-700 hover:bg-gray-50 rounded-md"
                      >
                        –õ—é—Å—Ç—Ä–∞ –∫–∞—Å–∫–∞–¥–Ω–∞—è
                      </button>
                      <button 
                        onClick={() => handleCategoryClickWithBrandContext({ label: '–õ—é—Å—Ç—Ä–∞ —Ö—Ä—É—Å—Ç–∞–ª—å–Ω–∞—è', searchName: '–õ—é—Å—Ç—Ä–∞ —Ö—Ä—É—Å—Ç–∞–ª—å–Ω–∞—è' })}
                        className="block w-full text-left px-3 py-2 text-sm text-gray-700 hover:bg-gray-50 rounded-md"
                      >
                        –õ—é—Å—Ç—Ä–∞ —Ö—Ä—É—Å—Ç–∞–ª—å–Ω–∞—è
                      </button>
                    </div>
                  </div>
                </div>

                <span className="text-gray-300">‚Ä¢</span>

                {/* –°–í–ï–¢–ò–õ–¨–ù–ò–ö–ò */}
                <div className="relative group">
                  <button className="px-4 py-2 bg-gray-50 hover:bg-gray-100 rounded-full text-sm font-medium text-gray-700 hover:text-black transition-colors">
                    –°–í–ï–¢–ò–õ–¨–ù–ò–ö–ò
                  </button>
                  <div className="absolute top-full left-0 mt-2 bg-white border border-gray-200 rounded-lg shadow-lg opacity-0 invisible group-hover:opacity-100 group-hover:visible transition-all duration-200 z-50 min-w-48">
                    <div className="p-2">
                      <button 
                        onClick={() => handleCategoryClickWithBrandContext({ label: '–¢–æ—á–µ—á–Ω—ã–π —Å–≤–µ—Ç–∏–ª—å–Ω–∏–∫', searchName: '–¢–æ—á–µ—á–Ω—ã–π —Å–≤–µ—Ç–∏–ª—å–Ω–∏–∫' })}
                        className="block w-full text-left px-3 py-2 text-sm text-gray-700 hover:bg-gray-50 rounded-md"
                      >
                        –¢–æ—á–µ—á–Ω—ã–π —Å–≤–µ—Ç–∏–ª—å–Ω–∏–∫
                      </button>
                      <button 
                        onClick={() => handleCategoryClickWithBrandContext({ label: '–¢—Ä–µ–∫–æ–≤—ã–π —Å–≤–µ—Ç–∏–ª—å–Ω–∏–∫', searchName: '–¢—Ä–µ–∫–æ–≤—ã–π —Å–≤–µ—Ç–∏–ª—å–Ω–∏–∫' })}
                        className="block w-full text-left px-3 py-2 text-sm text-gray-700 hover:bg-gray-50 rounded-md"
                      >
                        –¢—Ä–µ–∫–æ–≤—ã–π —Å–≤–µ—Ç–∏–ª—å–Ω–∏–∫
                      </button>
                      <button 
                        onClick={() => handleCategoryClickWithBrandContext({ label: '–ù–∞–∫–ª–∞–¥–Ω–æ–π —Å–≤–µ—Ç–∏–ª—å–Ω–∏–∫', searchName: '–ù–∞–∫–ª–∞–¥–Ω–æ–π —Å–≤–µ—Ç–∏–ª—å–Ω–∏–∫' })}
                        className="block w-full text-left px-3 py-2 text-sm text-gray-700 hover:bg-gray-50 rounded-md"
                      >
                        –ù–∞–∫–ª–∞–¥–Ω–æ–π —Å–≤–µ—Ç–∏–ª—å–Ω–∏–∫
                      </button>
                      <button 
                        onClick={() => handleCategoryClickWithBrandContext({ label: '–í—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã–π —Å–≤–µ—Ç–∏–ª—å–Ω–∏–∫', searchName: '–í—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã–π —Å–≤–µ—Ç–∏–ª—å–Ω–∏–∫' })}
                        className="block w-full text-left px-3 py-2 text-sm text-gray-700 hover:bg-gray-50 rounded-md"
                      >
                        –í—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã–π —Å–≤–µ—Ç–∏–ª—å–Ω–∏–∫
                      </button>
                      <button 
                        onClick={() => handleCategoryClickWithBrandContext({ label: '–ü–æ–¥–≤–µ—Å–Ω–æ–π —Å–≤–µ—Ç–∏–ª—å–Ω–∏–∫', searchName: '–ü–æ–¥–≤–µ—Å–Ω–æ–π —Å–≤–µ—Ç–∏–ª—å–Ω–∏–∫' })}
                        className="block w-full text-left px-3 py-2 text-sm text-gray-700 hover:bg-gray-50 rounded-md"
                      >
                        –ü–æ–¥–≤–µ—Å–Ω–æ–π —Å–≤–µ—Ç–∏–ª—å–Ω–∏–∫
                      </button>
                      <button 
                        onClick={() => handleCategoryClickWithBrandContext({ label: '–ü–æ—Ç–æ–ª–æ—á–Ω—ã–π —Å–≤–µ—Ç–∏–ª—å–Ω–∏–∫', searchName: '–ü–æ—Ç–æ–ª–æ—á–Ω—ã–π —Å–≤–µ—Ç–∏–ª—å–Ω–∏–∫' })}
                        className="block w-full text-left px-3 py-2 text-sm text-gray-700 hover:bg-gray-50 rounded-md"
                      >
                        –ü–æ—Ç–æ–ª–æ—á–Ω—ã–π —Å–≤–µ—Ç–∏–ª—å–Ω–∏–∫
                      </button>
                    </div>
                  </div>
                </div>

                <span className="text-gray-300">‚Ä¢</span>

                {/* –ù–ê–°–¢–ï–ù–ù–´–ï */}
                <div className="relative group">
                  <button className="px-4 py-2 bg-gray-50 hover:bg-gray-100 rounded-full text-sm font-medium text-gray-700 hover:text-black transition-colors">
                    –ù–ê–°–¢–ï–ù–ù–´–ï
                  </button>
                  <div className="absolute top-full left-0 mt-2 bg-white border border-gray-200 rounded-lg shadow-lg opacity-0 invisible group-hover:opacity-100 group-hover:visible transition-all duration-200 z-50 min-w-48">
                    <div className="p-2">
                      <button 
                        onClick={() => handleCategoryClickWithBrandContext({ label: '–ù–∞—Å—Ç–µ–Ω–Ω—ã–π —Å–≤–µ—Ç–∏–ª—å–Ω–∏–∫', searchName: '–ù–∞—Å—Ç–µ–Ω–Ω—ã–π —Å–≤–µ—Ç–∏–ª—å–Ω–∏–∫' })}
                        className="block w-full text-left px-3 py-2 text-sm text-gray-700 hover:bg-gray-50 rounded-md"
                      >
                        –ù–∞—Å—Ç–µ–Ω–Ω—ã–π —Å–≤–µ—Ç–∏–ª—å–Ω–∏–∫
                      </button>
                      <button 
                        onClick={() => handleCategoryClickWithBrandContext({ label: '–ë—Ä–∞', searchName: '–ë—Ä–∞' })}
                        className="block w-full text-left px-3 py-2 text-sm text-gray-700 hover:bg-gray-50 rounded-md"
                      >
                        –ë—Ä–∞
                      </button>
                      <button 
                        onClick={() => handleCategoryClickWithBrandContext({ label: '–ù–∞—Å—Ç–µ–Ω–Ω—ã–π —É–ª–∏—á–Ω—ã–π —Å–≤–µ—Ç–∏–ª—å–Ω–∏–∫', searchName: '–ù–∞—Å—Ç–µ–Ω–Ω—ã–π —É–ª–∏—á–Ω—ã–π —Å–≤–µ—Ç–∏–ª—å–Ω–∏–∫' })}
                        className="block w-full text-left px-3 py-2 text-sm text-gray-700 hover:bg-gray-50 rounded-md"
                      >
                        –ù–∞—Å—Ç–µ–Ω–Ω—ã–π —É–ª–∏—á–Ω—ã–π
                      </button>
                    </div>
                  </div>
                </div>

                <span className="text-gray-300">‚Ä¢</span>

                {/* –ù–ê–°–¢–û–õ–¨–ù–´–ï */}
                <div className="relative group">
                  <button className="px-4 py-2 bg-gray-50 hover:bg-gray-100 rounded-full text-sm font-medium text-gray-700 hover:text-black transition-colors">
                    –ù–ê–°–¢–û–õ–¨–ù–´–ï
                  </button>
                  <div className="absolute top-full left-0 mt-2 bg-white border border-gray-200 rounded-lg shadow-lg opacity-0 invisible group-hover:opacity-100 group-hover:visible transition-all duration-200 z-50 min-w-48">
                    <div className="p-2">
                      <button 
                        onClick={() => handleCategoryClickWithBrandContext({ label: '–ù–∞—Å—Ç–æ–ª—å–Ω–∞—è –ª–∞–º–ø–∞', searchName: '–ù–∞—Å—Ç–æ–ª—å–Ω–∞—è –ª–∞–º–ø–∞' })}
                        className="block w-full text-left px-3 py-2 text-sm text-gray-700 hover:bg-gray-50 rounded-md"
                      >
                        –ù–∞—Å—Ç–æ–ª—å–Ω–∞—è –ª–∞–º–ø–∞
                      </button>
                      <button 
                        onClick={() => handleCategoryClickWithBrandContext({ label: '–õ–∞–º–ø–∞ –æ—Ñ–∏—Å–Ω–∞—è', searchName: '–õ–∞–º–ø–∞ –æ—Ñ–∏—Å–Ω–∞—è' })}
                        className="block w-full text-left px-3 py-2 text-sm text-gray-700 hover:bg-gray-50 rounded-md"
                      >
                        –õ–∞–º–ø–∞ –æ—Ñ–∏—Å–Ω–∞—è
                      </button>
                      <button 
                        onClick={() => handleCategoryClickWithBrandContext({ label: '–õ–∞–º–ø–∞ –¥–µ–∫–æ—Ä–∞—Ç–∏–≤–Ω–∞—è', searchName: '–õ–∞–º–ø–∞ –¥–µ–∫–æ—Ä–∞—Ç–∏–≤–Ω–∞—è' })}
                        className="block w-full text-left px-3 py-2 text-sm text-gray-700 hover:bg-gray-50 rounded-md"
                      >
                        –õ–∞–º–ø–∞ –¥–µ–∫–æ—Ä–∞—Ç–∏–≤–Ω–∞—è
                      </button>
                    </div>
                  </div>
                </div>

                <br className="hidden sm:block" />

                {/* –ù–ê–ü–û–õ–¨–ù–´–ï */}
                <div className="relative group">
                  <button className="px-4 py-2 bg-gray-50 hover:bg-gray-100 rounded-full text-sm font-medium text-gray-700 hover:text-black transition-colors">
                    –ù–ê–ü–û–õ–¨–ù–´–ï
                  </button>
                  <div className="absolute top-full left-0 mt-2 bg-white border border-gray-200 rounded-lg shadow-lg opacity-0 invisible group-hover:opacity-100 group-hover:visible transition-all duration-200 z-50 min-w-48">
                    <div className="p-2">
                      <button 
                        onClick={() => handleCategoryClickWithBrandContext({ label: '–¢–æ—Ä—à–µ—Ä', searchName: '–¢–æ—Ä—à–µ—Ä' })}
                        className="block w-full text-left px-3 py-2 text-sm text-gray-700 hover:bg-gray-50 rounded-md"
                      >
                        –¢–æ—Ä—à–µ—Ä
                      </button>
                      <button 
                        onClick={() => handleCategoryClickWithBrandContext({ label: '–ù–∞–ø–æ–ª—å–Ω—ã–π —Å–≤–µ—Ç–∏–ª—å–Ω–∏–∫', searchName: '–ù–∞–ø–æ–ª—å–Ω—ã–π —Å–≤–µ—Ç–∏–ª—å–Ω–∏–∫' })}
                        className="block w-full text-left px-3 py-2 text-sm text-gray-700 hover:bg-gray-50 rounded-md"
                      >
                        –ù–∞–ø–æ–ª—å–Ω—ã–π —Å–≤–µ—Ç–∏–ª—å–Ω–∏–∫
                      </button>
                      <button 
                        onClick={() => handleCategoryClickWithBrandContext({ label: '–¢–æ—Ä—à–µ—Ä –¥–µ–∫–æ—Ä–∞—Ç–∏–≤–Ω—ã–π', searchName: '–¢–æ—Ä—à–µ—Ä –¥–µ–∫–æ—Ä–∞—Ç–∏–≤–Ω—ã–π' })}
                        className="block w-full text-left px-3 py-2 text-sm text-gray-700 hover:bg-gray-50 rounded-md"
                      >
                        –¢–æ—Ä—à–µ—Ä –¥–µ–∫–æ—Ä–∞—Ç–∏–≤–Ω—ã–π
                      </button>
                    </div>
                  </div>
                </div>

                <span className="text-gray-300">‚Ä¢</span>

                {/* –£–õ–ò–ß–ù–´–ï */}
                <div className="relative group">
                  <button className="px-4 py-2 bg-gray-50 hover:bg-gray-100 rounded-full text-sm font-medium text-gray-700 hover:text-black transition-colors">
                    –£–õ–ò–ß–ù–´–ï
                  </button>
                  <div className="absolute top-full left-0 mt-2 bg-white border border-gray-200 rounded-lg shadow-lg opacity-0 invisible group-hover:opacity-100 group-hover:visible transition-all duration-200 z-50 min-w-48">
                    <div className="p-2">
                      <button 
                        onClick={() => handleCategoryClickWithBrandContext({ label: '–£–ª–∏—á–Ω—ã–π —Å–≤–µ—Ç–∏–ª—å–Ω–∏–∫', searchName: '–£–ª–∏—á–Ω—ã–π —Å–≤–µ—Ç–∏–ª—å–Ω–∏–∫' })}
                        className="block w-full text-left px-3 py-2 text-sm text-gray-700 hover:bg-gray-50 rounded-md"
                      >
                        –£–ª–∏—á–Ω—ã–π —Å–≤–µ—Ç–∏–ª—å–Ω–∏–∫
                      </button>
                      <button 
                        onClick={() => handleCategoryClickWithBrandContext({ label: '–ì—Ä—É–Ω—Ç–æ–≤—ã–π —Å–≤–µ—Ç–∏–ª—å–Ω–∏–∫', searchName: '–ì—Ä—É–Ω—Ç–æ–≤—ã–π —Å–≤–µ—Ç–∏–ª—å–Ω–∏–∫' })}
                        className="block w-full text-left px-3 py-2 text-sm text-gray-700 hover:bg-gray-50 rounded-md"
                      >
                        –ì—Ä—É–Ω—Ç–æ–≤—ã–π —Å–≤–µ—Ç–∏–ª—å–Ω–∏–∫
                      </button>
                      <button 
                        onClick={() => handleCategoryClickWithBrandContext({ label: '–õ–∞–Ω–¥—à–∞—Ñ—Ç–Ω—ã–π —Å–≤–µ—Ç–∏–ª—å–Ω–∏–∫', searchName: '–õ–∞–Ω–¥—à–∞—Ñ—Ç–Ω—ã–π —Å–≤–µ—Ç–∏–ª—å–Ω–∏–∫' })}
                        className="block w-full text-left px-3 py-2 text-sm text-gray-700 hover:bg-gray-50 rounded-md"
                      >
                        –õ–∞–Ω–¥—à–∞—Ñ—Ç–Ω—ã–π
                      </button>
                      <button 
                        onClick={() => handleCategoryClickWithBrandContext({ label: '–ü–∞—Ä–∫–æ–≤—ã–π —Å–≤–µ—Ç–∏–ª—å–Ω–∏–∫', searchName: '–ü–∞—Ä–∫–æ–≤—ã–π —Å–≤–µ—Ç–∏–ª—å–Ω–∏–∫' })}
                        className="block w-full text-left px-3 py-2 text-sm text-gray-700 hover:bg-gray-50 rounded-md"
                      >
                        –ü–∞—Ä–∫–æ–≤—ã–π —Å–≤–µ—Ç–∏–ª—å–Ω–∏–∫
                      </button>
                    </div>
                  </div>
                </div>

                <span className="text-gray-300">‚Ä¢</span>

                {/* LED –õ–ï–ù–¢–´ */}
                <div className="relative group">
                  <button className="px-4 py-2 bg-gray-50 hover:bg-gray-100 rounded-full text-sm font-medium text-gray-700 hover:text-black transition-colors">
                    LED –õ–ï–ù–¢–´
                  </button>
                  <div className="absolute top-full left-0 mt-2 bg-white border border-gray-200 rounded-lg shadow-lg opacity-0 invisible group-hover:opacity-100 group-hover:visible transition-all duration-200 z-50 min-w-48">
                    <div className="p-2">
                      <button 
                        onClick={() => handleCategoryClickWithBrandContext({ label: '–°–≤–µ—Ç–æ–¥–∏–æ–¥–Ω–∞—è –ª–µ–Ω—Ç–∞', searchName: '–°–≤–µ—Ç–æ–¥–∏–æ–¥–Ω–∞—è –ª–µ–Ω—Ç–∞' })}
                        className="block w-full text-left px-3 py-2 text-sm text-gray-700 hover:bg-gray-50 rounded-md"
                      >
                        –°–≤–µ—Ç–æ–¥–∏–æ–¥–Ω–∞—è –ª–µ–Ω—Ç–∞
                      </button>
                      <button 
                        onClick={() => handleCategoryClickWithBrandContext({ label: '–ü—Ä–æ—Ñ–∏–ª—å –¥–ª—è –ª–µ–Ω—Ç—ã', searchName: '–ü—Ä–æ—Ñ–∏–ª—å –¥–ª—è –ª–µ–Ω—Ç—ã' })}
                        className="block w-full text-left px-3 py-2 text-sm text-gray-700 hover:bg-gray-50 rounded-md"
                      >
                        –ü—Ä–æ—Ñ–∏–ª—å –¥–ª—è –ª–µ–Ω—Ç—ã
                      </button>
                      <button 
                        onClick={() => handleCategoryClickWithBrandContext({ label: '–ë–ª–æ–∫ –ø–∏—Ç–∞–Ω–∏—è LED', searchName: '–ë–ª–æ–∫ –ø–∏—Ç–∞–Ω–∏—è LED' })}
                        className="block w-full text-left px-3 py-2 text-sm text-gray-700 hover:bg-gray-50 rounded-md"
                      >
                        –ë–ª–æ–∫ –ø–∏—Ç–∞–Ω–∏—è LED
                      </button>
                    </div>
                  </div>
                </div>

                <span className="text-gray-300">‚Ä¢</span>

                {/* –£–õ–ò–ß–ù–´–ï */}
                <div className="relative group">
                  <button className="px-4 py-2 bg-gray-50 hover:bg-gray-100 rounded-full text-sm font-medium text-gray-700 hover:text-black transition-colors">
                    –£–õ–ò–ß–ù–´–ï
                  </button>
                  <div className="absolute top-full left-0 mt-2 bg-white border border-gray-200 rounded-lg shadow-lg opacity-0 invisible group-hover:opacity-100 group-hover:visible transition-all duration-200 z-50 min-w-48">
                    <div className="p-2">
                      <button 
                        onClick={() => handleCategoryClickWithBrandContext({ label: '–£–ª–∏—á–Ω—ã–π —Å–≤–µ—Ç–∏–ª—å–Ω–∏–∫', searchName: '–£–ª–∏—á–Ω—ã–π —Å–≤–µ—Ç–∏–ª—å–Ω–∏–∫' })}
                        className="block w-full text-left px-3 py-2 text-sm text-gray-700 hover:bg-gray-50 rounded-md"
                      >
                        –£–ª–∏—á–Ω—ã–π —Å–≤–µ—Ç–∏–ª—å–Ω–∏–∫
                      </button>
                      <button 
                        onClick={() => handleCategoryClickWithBrandContext({ label: '–õ–∞–Ω–¥—à–∞—Ñ—Ç–Ω—ã–π —Å–≤–µ—Ç–∏–ª—å–Ω–∏–∫', searchName: '–õ–∞–Ω–¥—à–∞—Ñ—Ç–Ω—ã–π —Å–≤–µ—Ç–∏–ª—å–Ω–∏–∫' })}
                        className="block w-full text-left px-3 py-2 text-sm text-gray-700 hover:bg-gray-50 rounded-md"
                      >
                        –õ–∞–Ω–¥—à–∞—Ñ—Ç–Ω—ã–π —Å–≤–µ—Ç–∏–ª—å–Ω–∏–∫
                      </button>
                      <button 
                        onClick={() => handleCategoryClickWithBrandContext({ label: '–ì—Ä—É–Ω—Ç–æ–≤—ã–π —Å–≤–µ—Ç–∏–ª—å–Ω–∏–∫', searchName: '–ì—Ä—É–Ω—Ç–æ–≤—ã–π —Å–≤–µ—Ç–∏–ª—å–Ω–∏–∫' })}
                        className="block w-full text-left px-3 py-2 text-sm text-gray-700 hover:bg-gray-50 rounded-md"
                      >
                        –ì—Ä—É–Ω—Ç–æ–≤—ã–π —Å–≤–µ—Ç–∏–ª—å–Ω–∏–∫
                      </button>
                    </div>
                  </div>
                </div>

                <span className="text-gray-300">‚Ä¢</span>

                {/* –ö–û–ú–ü–õ–ï–ö–¢–£–Æ–©–ò–ï */}
                <div className="relative group">
                  <button className="px-4 py-2 bg-gray-50 hover:bg-gray-100 rounded-full text-sm font-medium text-gray-700 hover:text-black transition-colors">
                    –ö–û–ú–ü–õ–ï–ö–¢–£–Æ–©–ò–ï
                  </button>
                  <div className="absolute top-full left-0 mt-2 bg-white border border-gray-200 rounded-lg shadow-lg opacity-0 invisible group-hover:opacity-100 group-hover:visible transition-all duration-200 z-50 min-w-48">
                    <div className="p-2">
                      <button 
                        onClick={() => handleCategoryClickWithBrandContext({ label: '–ö–æ–Ω–Ω–µ–∫—Ç–æ—Ä—ã', searchName: '–ö–æ–Ω–Ω–µ–∫—Ç–æ—Ä—ã' })}
                        className="block w-full text-left px-3 py-2 text-sm text-gray-700 hover:bg-gray-50 rounded-md"
                      >
                       –ö–æ–Ω–Ω–µ–∫—Ç–æ—Ä—ã
                      </button>
                      <button 
                        onClick={() => handleCategoryClickWithBrandContext({ label: '–®–∏–Ω–æ–ø—Ä–æ–≤–æ–¥', searchName: '–®–∏–Ω–æ–ø—Ä–æ–≤–æ–¥' })}
                        className="block w-full text-left px-3 py-2 text-sm text-gray-700 hover:bg-gray-50 rounded-md"
                      >
                        –®–∏–Ω–æ–ø—Ä–æ–≤–æ–¥
                      </button>
                      <button 
                        onClick={() => handleCategoryClickWithBrandContext({ label: '–ë–ª–æ–∫ –ø–∏—Ç–∞–Ω–∏—è', searchName: '–ë–ª–æ–∫ –ø–∏—Ç–∞–Ω–∏—è' })}
                        className="block w-full text-left px-3 py-2 text-sm text-gray-700 hover:bg-gray-50 rounded-md"
                      >
                        –ë–ª–æ–∫ –ø–∏—Ç–∞–Ω–∏—è
                      </button>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          )}
          
          {/* Mobile Filter Button - —É–ª—É—á—à–µ–Ω–Ω—ã–π –≤–∏–¥ */}
          <div className="lg:hidden mb-4">
            <button 
              onClick={toggleMobileFilter}
              className="w-full py-2.5 px-4 bg-white rounded-md shadow-sm flex items-center justify-between border border-gray-200"
            >
              <span className="font-medium flex items-center text-sm">
                <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 mr-2 text-gray-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M3 4a1 1 0 011-1h16a1 1 0 011 1v2.586a1 1 0 01-.293.707l-6.414 6.414a1 1 0 00-.293.707V17l-4 4v-6.586a1 1 0 00-.293-.707L3.293 7.293A1 1 0 013 6.586V4z" />
                </svg>
                –§–∏–ª—å—Ç—Ä—ã
              </span>
              <span className="bg-gray-100 px-2 py-1 rounded text-xs font-medium text-gray-700">
                {totalProducts} —Ç–æ–≤–∞—Ä–æ–≤
              </span>
            </button>
          </div>
          
          <div className="flex flex-col lg:flex-row gap-4 lg:gap-8">
            {/* Left Sidebar - –£–ª—É—á—à–µ–Ω–Ω—ã–π –º–æ–±–∏–ª—å–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä */}
            <div className={`
              ${isMobileFilterOpen ? 'fixed inset-0 z-50 bg-white overflow-y-auto p-4' : 'hidden'} 
              lg:block lg:relative lg:z-auto lg:w-[280px] lg:flex-shrink-0
            `}>
              {/* Mobile Filter Header —Å –∫–Ω–æ–ø–∫–æ–π –∑–∞–∫—Ä—ã—Ç–∏—è */}
              {isMobileFilterOpen && (
                <div className="lg:hidden flex justify-between items-center mb-4 pb-3 border-b sticky top-0 bg-white z-10">
                  <h2 className="font-bold text-lg">–§–∏–ª—å—Ç—Ä—ã</h2>
                  <button 
                    onClick={toggleMobileFilter} 
                    className="p-1.5 rounded-full bg-gray-100 hover:bg-gray-200 transition-colors"
                  >
                    <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                    </svg>
                  </button>
                </div>
              )}

              {/* –ü–∞–Ω–µ–ª—å –±—Ä–µ–Ω–¥–∞ (–µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –±—Ä–µ–Ω–¥) */}
              {isClient && <BrandPanel />}

              {/* –ë–ª–æ–∫ –±—Ä–µ–Ω–¥–æ–≤ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ –≤—ã–±—Ä–∞–Ω –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –±—Ä–µ–Ω–¥ */}
              {(!selectedBrand || selectedBrand.name === '') && (
                <BrandsAccordion />
              )}

              {/* –ö–Ω–æ–ø–∫–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤ */}
              <div className="bg-white rounded-md p-4 shadow-sm mb-4 border border-gray-200">
                <div className="flex items-center mb-3">
                 
                  <span className="font-medium text-sm uppercase">–ö–∞—Ç–µ–≥–æ—Ä–∏–∏</span>
                </div>
                <div className="space-y-0.5 max-h-[400px] overflow-y-auto pr-1">
                  {/* –û–ø—Ü–∏–∏ —Ñ–∏–ª—å—Ç—Ä–∞ "–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ" */}
                  <div className="py-2">
                    <div className="text-xs uppercase text-gray-500 font-medium mb-2">–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ</div>
                    <div className="flex flex-col gap-2 ml-1">
                      <label className="flex items-center gap-2 cursor-pointer">
                        <input type="checkbox" className="form-checkbox h-4 w-4 text-black rounded-sm border-gray-300" />
                        <span className="text-sm text-gray-700">–í –Ω–∞–ª–∏—á–∏–∏</span>
                      </label>
                      <label className="flex items-center gap-2 cursor-pointer">
                        <input type="checkbox" className="form-checkbox h-4 w-4 text-black rounded-sm border-gray-300" />
                        <span className="text-sm text-gray-700">–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ</span>
                      </label>
                    </div>
                  </div>
                </div>
              </div>

              {/* Reset Filters button */}
              <div className="bg-white rounded-lg p-4 shadow-sm border border-gray-100 mb-4">
                <button
                  className="w-full py-2 border border-gray-300 rounded-md hover:bg-gray-50 text-sm text-gray-700 transition-colors font-medium flex items-center justify-center"
                  onClick={handleResetFilters}
                >
                  <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15" />
                  </svg>
                  –°–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ —Ñ–∏–ª—å—Ç—Ä—ã
                </button>
              </div>
              
              {/* –ó–∞–∫—Ä—ã—Ç—å —Ñ–∏–ª—å—Ç—Ä –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö */}
              {isMobileFilterOpen && (
                <div className="lg:hidden sticky bottom-0 left-0 right-0 bg-white p-3 border-t border-gray-200 mt-auto">
                  <button
                    onClick={toggleMobileFilter}
                    className="w-full py-2.5 bg-black text-white font-medium rounded-md"
                  >
                    –ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã ({totalProducts})
                  </button>
                </div>
              )}
            </div>

            {/* Right Content Area */}
            <div className="flex-1">
              {/* Filter and Sort controls —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –∞–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç—å—é */}
              <div className="bg-white rounded-lg p-3 sm:p-4 mb-4 sm:mb-6 shadow-sm border border-gray-100 flex flex-col sm:flex-row justify-between items-center gap-3">
                <div className="text-sm text-gray-700 font-medium w-full sm:w-auto text-center sm:text-left">
                  –ù–∞–π–¥–µ–Ω–æ: <span className="text-black font-semibold">{totalProducts}</span> {getTotalProductsText(totalProducts)}
                  {/* –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è - —É–¥–∞–ª–∏—Ç—å –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ */}
                  {process.env.NODE_ENV === 'development' && (
                    <span className="text-xs text-gray-500 ml-2">
                      (–°—Ç—Ä–∞–Ω–∏—Ü–∞ {currentPage}/{totalPages}, –ø–æ–∫–∞–∑–∞–Ω–æ: {products.length})
                    </span>
                  )}
                </div>
                
                <div className="flex items-center gap-2 sm:gap-3 w-full sm:w-auto justify-between sm:justify-end">
                  {/* –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å —Ä–µ–∂–∏–º–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –¥–µ—Å–∫—Ç–æ–ø–∞ - —É–ª—É—á—à–µ–Ω–Ω—ã–π –¥–∏–∑–∞–π–Ω */}
                  <div className="hidden sm:flex bg-white border border-gray-200 rounded-md shadow-sm px-1 py-1">
                    <button
                      onClick={() => setViewMode('grid')}
                      className={`p-1.5 rounded-md transition-all ${
                        viewMode === 'grid' 
                          ? 'bg-gradient-to-r from-gray-800 to-gray-700 text-white shadow-sm' 
                          : 'text-gray-600 hover:bg-gray-50'
                      }`}
                      title="–°–µ—Ç–∫–∞"
                    >
                      <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={1.5} d="M4 6a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2H6a2 2 0 01-2-2V6zM14 6a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2h-2a2 2 0 01-2-2V6zM4 16a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2H6a2 2 0 01-2-2v-2zM14 16a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2h-2a2 2 0 01-2-2v-2z" />
                      </svg>
                    </button>
                    <button
                      onClick={() => setViewMode('list')}
                      className={`p-1.5 rounded-md transition-all ${
                        viewMode === 'list' 
                          ? 'bg-gradient-to-r from-gray-800 to-gray-700 text-white shadow-sm' 
                          : 'text-gray-600 hover:bg-gray-50'
                      }`}
                      title="–°–ø–∏—Å–æ–∫"
                    >
                      <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={1.5} d="M4 6h16M4 12h16M4 18h16" />
                      </svg>
                    </button>
                    <button
                      onClick={() => setViewMode('table')}
                      className={`p-1.5 rounded-md transition-all ${
                        viewMode === 'table' 
                          ? 'bg-gradient-to-r from-gray-800 to-gray-700 text-white shadow-sm' 
                          : 'text-gray-600 hover:bg-gray-50'
                      }`}
                      title="–¢–∞–±–ª–∏—Ü–∞"
                    >
                      <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={1.5} d="M3 10h18M3 14h18M3 6h18M3 18h18" />
                      </svg>
                    </button>
                  </div>
                  
                  {/* –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç/–∫–æ–ª–ª–µ–∫—Ü–∏—è - —É–ª—É—á—à–µ–Ω–Ω—ã–π –¥–∏–∑–∞–π–Ω */}
                  <div className="flex bg-white rounded-rounded  shadow-sm overflow-hidden">
                    <button 
                      onClick={() => setDisplayMode('product')}
                      className={`px-3 sm:px-4 py-1.5 sm:py-2 text-xs sm:text-sm font-medium transition-all ${
                        displayMode === 'product' 
                          ? 'bg-gradient-to-r rounded-full text-black' 
                          : 'text-black hover:bg-gray-50'
                      }`}
                    >
                      <div className="flex items-center gap-1.5">
                       
                        <span>–¢–æ–≤–∞—Ä—ã</span>
                      </div>
                    </button>
                    <button
                      onClick={() => setDisplayMode('collection')}
                      className={`px-3 sm:px-4 py-1.5 sm:py-2 text-xs sm:text-sm font-medium transition-all ${
                        displayMode === 'collection'
                          ? 'bg-gradient-to-r roinded-full text-black' 
                          : 'text-black hover:bg-gray-50'
                      }`}
                    >
                      <div className="flex items-center gap-1.5">
                        
                        <span>–ö–æ–ª–ª–µ–∫—Ü–∏–∏</span>
                      </div>
                    </button>
                  </div>
                  
                  {/* –ú–æ–±–∏–ª—å–Ω—ã–π –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å —Ä–µ–∂–∏–º–æ–≤ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è - —É–ª—É—á—à–µ–Ω–Ω—ã–π –¥–∏–∑–∞–π–Ω */}
                  <div className="sm:hidden flex bg-white border border-gray-200 rounded-md shadow-sm px-1 py-1">
                    <button
                      onClick={() => setViewMode('grid')}
                      className={`p-1.5 rounded-md transition-all ${
                        viewMode === 'grid' 
                          ? 'bg-gradient-to-r from-gray-800 to-gray-700 text-white shadow-sm' 
                          : 'text-gray-600 hover:bg-gray-50'
                      }`}
                      title="–°–µ—Ç–∫–∞"
                    >
                      <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={1.5} d="M4 6a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2H6a2 2 0 01-2-2V6zM14 6a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2h-2a2 2 0 01-2-2V6z" />
                      </svg>
                    </button>
                    <button
                      onClick={() => setViewMode('table')}
                      className={`p-1.5 rounded-md transition-all ${
                        viewMode === 'table' 
                          ? 'bg-gradient-to-r from-gray-800 to-gray-700 text-white shadow-sm' 
                          : 'text-gray-600 hover:bg-gray-50'
                      }`}
                      title="–¢–∞–±–ª–∏—Ü–∞"
                    >
                      <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={1.5} d="M3 10h18M3 14h18" />
                      </svg>
                    </button>
                  </div>
                  
                  <select
                    className="text-xs sm:text-sm border rounded-md px-2 py-1.5 sm:px-3 sm:py-2 bg-white focus:ring-2 focus:ring-gray-200 outline-none flex-1 sm:flex-none shadow-sm"
                    value={sortOrder || 'popularity'}
                    onChange={(e) => handleSortOrderChange(e.target.value as any)}
                  >
                    <option value="popularity">–ü–æ –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏</option>
                    <option value="newest">–°–Ω–∞—á–∞–ª–∞ –Ω–æ–≤—ã–µ</option>
                    <option value="asc">–¶–µ–Ω–∞ ‚Üë</option>
                    <option value="desc">–¶–µ–Ω–∞ ‚Üì</option>
                  </select>
                </div>
              </div>

              {/* –ê–∫—Ç–∏–≤–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã, –µ—Å–ª–∏ –µ—Å—Ç—å */}
              {(selectedBrand?.name !== '–í—Å–µ —Ç–æ–≤–∞—Ä—ã' || 
                selectedCategory?.label !== '–í—Å–µ —Ç–æ–≤–∞—Ä—ã' || 
                minPrice !== 10 || 
                maxPrice !== 1000000 || 
                selectedColor ||
                selectedMaterial ||
                searchQuery) && (
                <div className="flex flex-col space-y-2 mb-6">
                 
                  
                  <div className="flex flex-wrap gap-2 mt-2">
                    {selectedCategory?.label !== '–í—Å–µ —Ç–æ–≤–∞—Ä—ã' && (
                      <div className="inline-flex items-center py-1.5 px-3 bg-gray-50 hover:bg-gray-100 transition-colors rounded-md">
                        <span className="text-sm font-medium text-gray-800 mr-2">{selectedCategory?.label}</span>
                        <button 
                          onClick={() => handleCategoryChange({ label: '–í—Å–µ —Ç–æ–≤–∞—Ä—ã', searchName: '–í—Å–µ —Ç–æ–≤–∞—Ä—ã' })} 
                          className="text-gray-500 hover:text-red-500"
                        >
                          <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4" viewBox="0 0 20 20" fill="currentColor">
                            <path fillRule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clipRule="evenodd" />
                          </svg>
                        </button>
                      </div>
                    )}
                    
                    {selectedBrand && selectedBrand.name !== '–í—Å–µ —Ç–æ–≤–∞—Ä—ã' && (
                      <div className="inline-flex items-center py-1.5 px-3 bg-gray-50 hover:bg-gray-100 transition-colors rounded-md">
                        <span className="text-sm font-medium text-gray-800 mr-2">{selectedBrand.name}</span>
                        <button 
                          onClick={() => {
                            const globalBrand = brands.find(b => b.name === '–í—Å–µ —Ç–æ–≤–∞—Ä—ã');
                            if (globalBrand) handleBrandChange(globalBrand);
                          }}
                          className="text-gray-500 hover:text-red-500"
                        >
                          <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4" viewBox="0 0 20 20" fill="currentColor">
                            <path fillRule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clipRule="evenodd" />
                          </svg>
                        </button>
                      </div>
                    )}
                    
                    {(minPrice !== 10 || maxPrice !== 1000000) && (
                      <div className="inline-flex items-center py-1.5 px-3 bg-gray-50 hover:bg-gray-100 transition-colors rounded-md">
                        <span className="text-sm font-medium text-gray-800 mr-2">{minPrice}‚ÇΩ - {maxPrice}‚ÇΩ</span>
                        <button 
                          onClick={() => {
                            setMinPrice(10);
                            setMaxPrice(1000000);
                            handlePriceRangeChange(10, 1000000);
                          }} 
                          className="text-gray-500 hover:text-red-500"
                        >
                          <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4" viewBox="0 0 20 20" fill="currentColor">
                            <path fillRule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clipRule="evenodd" />
                          </svg>
                        </button>
                      </div>
                    )}
                    
                    {selectedColor && (
                      <div className="inline-flex items-center py-1.5 px-3 bg-gray-50 hover:bg-gray-100 transition-colors rounded-md">
                        <span className="w-3 h-3 rounded-full mr-2 border border-gray-300" style={{ backgroundColor: selectedColor.toLowerCase() }}></span>
                        <span className="text-sm font-medium text-gray-800 mr-2">{selectedColor}</span>
                        <button 
                          onClick={() => handleColorChange(selectedColor)} 
                          className="text-gray-500 hover:text-red-500"
                        >
                          <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4" viewBox="0 0 20 20" fill="currentColor">
                            <path fillRule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clipRule="evenodd" />
                          </svg>
                        </button>
                      </div>
                    )}
                    
                    {selectedMaterial && (
                      <div className="inline-flex items-center py-1.5 px-3 bg-gray-50 hover:bg-gray-100 transition-colors rounded-md">
                        <span className="text-sm font-medium text-gray-800 mr-2">{selectedMaterial}</span>
                        <button 
                          onClick={() => handleMaterialChange(selectedMaterial)} 
                          className="text-gray-500 hover:text-red-500"
                        >
                          <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4" viewBox="0 0 20 20" fill="currentColor">
                            <path fillRule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clipRule="evenodd" />
                          </svg>
                        </button>
                      </div>
                    )}
                    
                    {searchQuery && (
                      <div className="inline-flex items-center py-1.5 px-3 bg-gray-50 hover:bg-gray-100 transition-colors rounded-md">
                        <span className="text-sm font-medium text-gray-800 mr-2">"{searchQuery}"</span>
                        <button 
                          onClick={() => {
                            setSearchQuery('');
                            fetchProducts(selectedBrand?.name || '');
                          }} 
                          className="text-gray-500 hover:text-red-500"
                        >
                          <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4" viewBox="0 0 20 20" fill="currentColor">
                            <path fillRule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clipRule="evenodd" />
                          </svg>
                        </button>
                      </div>
                    )}
                  </div>
                </div>
              )}

              {/* –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç ImageCategories */}
              
              {/* –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ - —É–±–∏—Ä–∞–µ–º —É—Å–ª–æ–≤–Ω—ã–π —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥ */}
              <RelatedCategories />

             
              {/* Products Grid */}
              <div className="flex-1 bg-white rounded-lg p-4 sm:p-5 shadow-sm border border-gray-100 overflow-hidden">
                {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ –±—Ä–µ–Ω–¥–∞ –Ω–∞–¥ —Ç–æ–≤–∞—Ä–∞–º–∏ */}
                {selectedBrand && selectedBrand.name !== '–í—Å–µ —Ç–æ–≤–∞—Ä—ã' && (
                  <div className="mb-6 flex flex-col sm:flex-row items-center gap-3 sm:gap-5 border-b pb-4">
                    <div className="text-center sm:text-left">
                      <h1 className="text-xl sm:text-2xl font-bold text-gray-900">{selectedBrand.name}</h1>
                      <div className="text-sm text-gray-500 mt-1">
                        {selectedCategory?.label !== '–í—Å–µ —Ç–æ–≤–∞—Ä—ã' ? (
                          <>
                            <span className="font-medium">{selectedCategory?.label}</span>
                            <span className="mx-1">‚Ä¢</span>
                          </>
                        ) : null}
                        <span>{totalProducts} {getTotalProductsText(totalProducts)}</span>
                      </div>
                    </div>
                    <div className="ml-auto hidden sm:block">
                      {selectedBrand && selectedBrand.categories.length > 0 && (
                        <div className="flex flex-wrap gap-2 justify-end">
                          {selectedBrand.categories
                            .filter(category => category.label !== '–í—Å–µ —Ç–æ–≤–∞—Ä—ã')
                            .slice(0, 5)
                            .map((category, idx) => (
                              <button
                                key={idx}
                                onClick={() => handleCategoryChange(category)}
                                className={`px-3 py-1.5 rounded-md text-xs ${
                                  selectedCategory?.label === category.label
                                    ? 'bg-black text-white font-medium'
                                    : 'bg-gray-100 text-gray-700 hover:bg-gray-200'
                                }`}
                              >
                                {category.label}
                              </button>
                            ))}
                        </div>
                      )}
                    </div>
                  </div>
                )}
                
                {/* --- –ò–∑–º–µ–Ω–µ–Ω–Ω—ã–π –±–ª–æ–∫ –∑–∞–≥—Ä—É–∑–∫–∏ --- */}
                {(isLoading || !isClient) ? (
                  // –í—Å–µ–≥–¥–∞ —Ä–µ–Ω–¥–µ—Ä–∏–º —Å–∫–µ–ª–µ—Ç–æ–Ω —Å–µ—Ç–∫–∏, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å CLS=null
                  <div className="grid auto-rows-auto w-full grid-cols-1 gap-4 sm:grid-cols-2 sm:gap-4 md:grid-cols-3 md:gap-6 lg:grid-cols-4 lg:gap-6 xl:grid-cols-4 xl:gap-6">
                    {Array.from({ length: 8 }).map((_, i) => (
                      <div key={`skeleton-${i}`} className="bg-white rounded-lg border border-gray-100 flex flex-col h-full">
                        <div className="relative aspect-square bg-gray-100 animate-pulse rounded-t-lg min-h-[150px] sm:min-h-[180px]"></div>
                        <div className="p-2 sm:p-4 flex flex-col flex-grow">
                          <div className="h-4 bg-gray-200 rounded w-3/4 mb-2 animate-pulse"></div>
                          <div className="h-3 bg-gray-200 rounded w-1/2 mb-3 animate-pulse"></div>
                          <div className="mt-auto flex items-center justify-between gap-2">
                            <div className="h-5 bg-gray-200 rounded w-1/3 animate-pulse"></div>
                            <div className="h-8 bg-gray-300 rounded w-1/2 animate-pulse"></div>
                          </div>
                        </div>
                      </div>
                    ))}
                  </div>
                ) : products.length > 0 ? (
                  // –†–µ–Ω–¥–µ—Ä —Ä–µ–∞–ª—å–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
                  <>
                    {displayMode === 'product' ? (
                      <CatalogOfProductSearch
                        products={products}
                        viewMode={viewMode}
                        isLoading={isLoading} // –ü–µ—Ä–µ–¥–∞–µ–º isLoading, —Ö–æ—Ç—è –æ–Ω —É–∂–µ false –∑–¥–µ—Å—å
                      />
                      // ... (–æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –¥–ª—è product mode)
                     ) : (
                      // –†–µ–∂–∏–º –∫–æ–ª–ª–µ–∫—Ü–∏–π
                      <div className="space-y-10">
                        {Object.entries(groupProductsByCollection(products))
                          // –°–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–ª–ª–µ–∫—Ü–∏–∏: —Å–Ω–∞—á–∞–ª–∞ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Ç–æ–≤–∞—Ä–æ–≤ (–ø–æ —É–±—ã–≤–∞–Ω–∏—é), 
                          // –Ω–æ "–ü—Ä–æ—á–∏–µ —Ç–æ–≤–∞—Ä—ã" –≤—Å–µ–≥–¥–∞ –≤–Ω–∏–∑—É
                          .sort((a, b) => {
                            if (a[0] === '–ü—Ä–æ—á–∏–µ —Ç–æ–≤–∞—Ä—ã') return 1;
                            if (b[0] === '–ü—Ä–æ—á–∏–µ —Ç–æ–≤–∞—Ä—ã') return -1;
                            return b[1].length - a[1].length;
                          })
                          .map(([collectionName, collectionProducts]) => (
                            <div key={collectionName} className={`mb-12 ${collectionName === '–ü—Ä–æ—á–∏–µ —Ç–æ–≤–∞—Ä—ã' ? 'mt-8 pt-8 border-t border-gray-200' : ''}`}>
                              <div className="flex items-center gap-2 mb-4">
                                <h3 className="text-xl font-bold text-gray-900">{collectionName}</h3>
                                <span className="text-xs text-gray-500 bg-gray-100 px-2 py-1 rounded-full">
                                  {collectionProducts.length} {collectionProducts.length === 1 ? '—Ç–æ–≤–∞—Ä' : 
                                    (collectionProducts.length >= 2 && collectionProducts.length <= 4) ? '—Ç–æ–≤–∞—Ä–∞' : '—Ç–æ–≤–∞—Ä–æ–≤'}
                                </span>
                              </div>
                              <div className="border-b border-gray-200 mb-4"></div>
                              <CatalogOfProductSearch
                                products={collectionProducts} 
                                viewMode={viewMode}
                                isLoading={isLoading}                      
                              />
                            </div>
                          ))
                        }
                      </div>
                    )}
                     {/* –ü–∞–≥–∏–Ω–∞—Ü–∏—è */}
                     <div className={`mt-8 ${displayMode === 'collection' ? 'hidden sm:hidden' : ''}`}>
                       {renderPagination()}
                     </div>
                  </>
                ) : (
                   // –¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã
                  <div className="p-12 text-center">
                    <svg xmlns="http://www.w3.org/2000/svg" className="h-16 w-16 mx-auto text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={1.5} d="M9.172 16.172a4 4 0 015.656 0M9 10h.01M15 10h.01M12 14a2 2 0 100-4 2 2 0 000 4z" />
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={1.5} d="M22 12a10 10 0 11-20 0 10 10 0 0120 0z" />
                    </svg>
                    <p className="mt-4 text-gray-500 text-lg">–¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</p>
                    <p className="text-gray-400 mt-2">–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏</p>
                    <button 
                      onClick={handleResetFilters} 
                      className="mt-4 px-4 py-2 bg-black text-white rounded-md hover:bg-gray-800 transition-colors text-sm font-medium"
                    >
                      –°–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ —Ñ–∏–ª—å—Ç—Ä—ã
                    </button>
                  </div>
                )}
              </div> {/* –ö–æ–Ω–µ—Ü Products Area */}
            </div> {/* –ö–æ–Ω–µ—Ü Right Content Area */}
          </div> {/* –ö–æ–Ω–µ—Ü flex-col lg:flex-row */}
        </div> {/* –ö–æ–Ω–µ—Ü max-w-9xl */}
      </main>
      <Footer />
    </div>
  );
};

export const getServerSideProps: GetServerSideProps = async ({ query }) => {
  const { source, page, category, color, material, minPrice, maxPrice, sort } = query;
  const sourceName = source || '';
  const pageNumber = page ? parseInt(page as string, 10) : 1;
  const limit = 40; // –õ–∏–º–∏—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ

  try {
    const timeoutPromise = new Promise((_, reject) => {
      setTimeout(() => reject(new Error('Timeout')), 5000); // 5 —Å–µ–∫ —Ç–∞–π–º–∞—É—Ç
    });

    const params: Record<string, any> = { limit, page: pageNumber }; // –ü–µ—Ä–µ–¥–∞–µ–º limit –∏ page –≤ params

    // ... (–ª–æ–≥–∏–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ sortBy, sortOrder, name, color, material, minPrice, maxPrice –≤ params) ...
     // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
     if (sort) {
       if (sort === 'asc') { params.sortBy = 'price'; params.sortOrder = 'asc'; }
       else if (sort === 'desc') { params.sortBy = 'price'; params.sortOrder = 'desc'; }
       else if (sort === 'popularity') { params.sortBy = 'popularity'; params.sortOrder = 'desc'; }
       else if (sort === 'newest') { params.sortBy = 'date'; params.sortOrder = 'desc'; }
     } else {
       params.sortBy = 'popularity'; params.sortOrder = 'desc'; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é - –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç—å
     }
     // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
     if (category && typeof category === 'string' && category.toLowerCase() !== '–≤—Å–µ —Ç–æ–≤–∞—Ä—ã' /*...*/) {
        const decodedCategory = decodeURIComponent(category);
        if (decodedCategory.toLowerCase().includes('–Ω–∞—Å—Ç–æ–ª—å–Ω')) {
            params.name = '–ù–∞—Å—Ç–æ–ª—å–Ω–∞—è –ª–∞–º–ø–∞';
        } else {
            params.name = decodedCategory;
        }
     }
     if (color) params.color = color;
     if (material) params.material = material;
     if (minPrice && !isNaN(Number(minPrice))) params.minPrice = Number(minPrice);
     if (maxPrice && !isNaN(Number(maxPrice))) params.maxPrice = Number(maxPrice);


    // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω—É–∂–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
    const dataPromise = fetchProductsForPageStandalone(sourceName as string, pageNumber, limit, params); // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é

    const initialData = await Promise.race([dataPromise, timeoutPromise]) as {
      products: ProductI[],
      totalPages: number,
      totalProducts: number
    };

    // –ü–æ–ª—É—á–∞–µ–º URL –¥–ª—è LCP –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ (–ø–µ—Ä–≤—ã–µ 3 —Ç–æ–≤–∞—Ä–∞)
    const lcpImageUrls = (initialData.products || [])
      .slice(0, 3) // –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 3
      .map(product => {
        let originalUrl: string | null = null;
         if (typeof product.imageAddresses === 'string') originalUrl = product.imageAddresses;
         else if (Array.isArray(product.imageAddresses) && product.imageAddresses.length > 0) originalUrl = product.imageAddresses[0];
         else if (typeof product.imageAddress === 'string') originalUrl = product.imageAddress;
         else if (Array.isArray(product.imageAddress) && product.imageAddress.length > 0) originalUrl = product.imageAddress[0];

        if (!originalUrl) return null;
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–µ—Ä–≤–µ—Ä–Ω–æ-–±–µ–∑–æ–ø–∞—Å–Ω—É—é –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—é
        return normalizeUrlServerSafe(originalUrl, true); // true = isLCP
      })
      .filter(url => url !== null) as string[];

    return {
      props: {
        initialProducts: initialData.products || [],
        initialTotalPages: initialData.totalPages || 1,
        initialTotalProducts: initialData.totalProducts || 0,
        source: sourceName || null,
        lcpImageUrls: lcpImageUrls, // –ü–µ—Ä–µ–¥–∞–µ–º URL
      }
    };
  } catch (error) {
    console.error('‚ùå –û–®–ò–ë–ö–ê –í getServerSideProps:', error);
    return {
      props: {
        initialProducts: [],
        initialTotalPages: 1, // –ò–∑–º–µ–Ω—è–µ–º —Å 0 –Ω–∞ 1
        initialTotalProducts: 0,
        source: sourceName || null,
        lcpImageUrls: [], // –ü—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
      }
    };
  }
};

export default CatalogIndex;